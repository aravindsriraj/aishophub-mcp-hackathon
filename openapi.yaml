openapi: 3.0.3
info:
  title: AI ShopHub E-Commerce API
  description: |
    Comprehensive REST API for AI ShopHub e-commerce platform featuring:
    - AI-powered semantic product search
    - User authentication and session management
    - Shopping cart and wishlist functionality
    - Order processing and management
    - Product catalog with advanced filtering
    
    The API supports two authentication methods:
    1. Bearer token authentication for web/mobile clients
    2. Basic authentication (email:password) for API integrations
  version: 1.0.0
  contact:
    name: AI ShopHub Support
    email: support@aishophub.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://aishophub.replit.app
    description: Production server
  - url: http://localhost:5000
    description: Development server

tags:
  - name: Authentication
    description: User authentication and session management endpoints
  - name: Products
    description: Product catalog, search, and AI-powered semantic search
  - name: Cart
    description: Shopping cart management operations
  - name: Wishlist
    description: User wishlist management
  - name: Orders
    description: Order processing and management
  - name: Filters
    description: Product filtering and categorization

paths:
  /api/auth/signup:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Create a new user account with email, password, and name
      operationId: signUp
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address (must be unique)
                  example: user@example.com
                password:
                  type: string
                  format: password
                  minLength: 6
                  description: User's password (minimum 6 characters)
                  example: SecurePass123!
                name:
                  type: string
                  description: User's full name
                  example: John Doe
      responses:
        '200':
          description: User successfully created and logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: Session token for authentication
                    example: abc123def456...
        '400':
          description: Invalid input or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/signin:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user with email and password to receive session token
      operationId: signIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's registered email address
                  example: user@example.com
                password:
                  type: string
                  format: password
                  description: User's password
                  example: SecurePass123!
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
                    description: Session token for authentication
                    example: abc123def456...
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      description: Invalidate current session token and log out user
      operationId: logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Retrieve current authenticated user's information
      operationId: getCurrentUser
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/products:
    get:
      tags:
        - Products
      summary: List products
      description: Retrieve paginated list of products with optional filters and sorting
      operationId: getProducts
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: limit
          in: query
          description: Number of products per page
          schema:
            type: integer
            default: 20
            minimum: 1
            maximum: 100
        - name: search
          in: query
          description: Search term to filter products by name or description
          schema:
            type: string
        - name: category
          in: query
          description: Filter products by category
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort products by specified criteria
          schema:
            type: string
            enum:
              - price_asc
              - price_desc
              - rating
              - newest
        - name: priceMin
          in: query
          description: Minimum price filter
          schema:
            type: number
            minimum: 0
        - name: priceMax
          in: query
          description: Maximum price filter
          schema:
            type: number
            minimum: 0
        - name: rating
          in: query
          description: Minimum rating filter (1-5)
          schema:
            type: number
            minimum: 1
            maximum: 5
      responses:
        '200':
          description: List of products with pagination info
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/semantic-search:
    post:
      tags:
        - Products
      summary: AI-powered semantic search
      description: |
        Search products using natural language queries powered by AI. 
        This endpoint understands context and intent, allowing searches like:
        - "comfortable running shoes for marathons"
        - "black shirt with white pants"
        - "gaming laptop under 50000"
        - "gift for 10 year old boy who likes science"
      operationId: semanticSearch
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - query
              properties:
                query:
                  type: string
                  description: Natural language search query
                  example: "black shirt with white pant"
                n_results:
                  type: integer
                  description: Number of results to return
                  default: 20
                  minimum: 1
                  maximum: 100
      responses:
        '200':
          description: Semantically relevant products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: Product ID
                        text:
                          type: string
                          description: Product description used for matching
                        metadata:
                          type: object
                          description: Additional product metadata
                        relevance_score:
                          type: number
                          description: Semantic relevance score (0-1)
        '400':
          description: Invalid query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/by-ids:
    get:
      tags:
        - Products
      summary: Get products by IDs
      description: Retrieve multiple products by their IDs with optional filters and sorting
      operationId: getProductsByIds
      parameters:
        - name: ids
          in: query
          required: true
          description: Comma-separated list of product IDs
          schema:
            type: string
            example: "B0CDGM3SZM,B07F755J59,B094N6Q59T"
        - name: category
          in: query
          description: Filter results by category
          schema:
            type: string
        - name: sortBy
          in: query
          description: Sort products by specified criteria
          schema:
            type: string
            enum:
              - price_asc
              - price_desc
              - rating
        - name: priceMin
          in: query
          description: Minimum price filter
          schema:
            type: number
        - name: priceMax
          in: query
          description: Maximum price filter
          schema:
            type: number
        - name: rating
          in: query
          description: Minimum rating filter
          schema:
            type: number
      responses:
        '200':
          description: List of requested products
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: '#/components/schemas/Product'
        '400':
          description: Invalid product IDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/products/{id}:
    get:
      tags:
        - Products
      summary: Get product details
      description: Retrieve detailed information about a specific product
      operationId: getProductById
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/categories:
    get:
      tags:
        - Products
      summary: List categories
      description: Retrieve all available product categories
      operationId: getCategories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                example:
                  - "Electronics"
                  - "Clothing"
                  - "Home & Kitchen"
                  - "Sports & Outdoors"

  /api/cart:
    get:
      tags:
        - Cart
      summary: Get cart items
      description: Retrieve all items in the authenticated user's shopping cart
      operationId: getCart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      tags:
        - Cart
      summary: Add to cart
      description: Add a product to the shopping cart
      operationId: addToCart
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
                - quantity
              properties:
                productId:
                  type: string
                  description: Product ID to add
                quantity:
                  type: integer
                  minimum: 1
                  description: Quantity to add
      responses:
        '200':
          description: Cart item added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      tags:
        - Cart
      summary: Clear cart
      description: Remove all items from the shopping cart
      operationId: clearCart
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Cart cleared
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/cart/{productId}:
    put:
      tags:
        - Cart
      summary: Update cart item
      description: Update the quantity of a product in the cart
      operationId: updateCartItem
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - quantity
              properties:
                quantity:
                  type: integer
                  minimum: 0
                  description: New quantity (0 to remove)
      responses:
        '200':
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CartItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    delete:
      tags:
        - Cart
      summary: Remove from cart
      description: Remove a specific product from the cart
      operationId: removeFromCart
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Item removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/wishlist:
    get:
      tags:
        - Wishlist
      summary: Get wishlist
      description: Retrieve all items in the user's wishlist
      operationId: getWishlist
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Wishlist items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WishlistItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    
    post:
      tags:
        - Wishlist
      summary: Add to wishlist
      description: Add a product to the wishlist
      operationId: addToWishlist
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - productId
              properties:
                productId:
                  type: string
                  description: Product ID to add
      responses:
        '200':
          description: Item added to wishlist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishlistItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/wishlist/{productId}:
    delete:
      tags:
        - Wishlist
      summary: Remove from wishlist
      description: Remove a product from the wishlist
      operationId: removeFromWishlist
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Item removed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/wishlist/check/{productId}:
    get:
      tags:
        - Wishlist
      summary: Check wishlist status
      description: Check if a product is in the user's wishlist
      operationId: checkWishlistStatus
      security:
        - bearerAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Wishlist status
          content:
            application/json:
              schema:
                type: object
                properties:
                  isInWishlist:
                    type: boolean
                    description: Whether product is in wishlist
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/checkout:
    post:
      tags:
        - Orders
      summary: Checkout cart
      description: Create an order from current cart items and clear the cart
      operationId: checkout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  order:
                    $ref: '#/components/schemas/Order'
                  message:
                    type: string
                    example: "Order placed successfully"
        '400':
          description: Cart is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/orders:
    get:
      tags:
        - Orders
      summary: Get user orders
      description: Retrieve all orders for the authenticated user
      operationId: getOrders
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /api/orders/{orderId}:
    get:
      tags:
        - Orders
      summary: Get order details
      description: Retrieve details of a specific order
      operationId: getOrderById
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: Order ID
          schema:
            type: string
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Unauthorized to view order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /filters/listCategories:
    get:
      tags:
        - Filters
      summary: List categories (Basic Auth)
      description: Get all available product categories using basic authentication
      operationId: listCategoriesBasicAuth
      security:
        - basicAuth: []
      responses:
        '200':
          description: Categories list
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  categories:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /wishlist/listProducts:
    get:
      tags:
        - Wishlist
      summary: List wishlist products (Basic Auth)
      description: Get all products in user's wishlist using basic authentication
      operationId: listWishlistProductsBasicAuth
      security:
        - basicAuth: []
      responses:
        '200':
          description: Wishlist products
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  products:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        name:
                          type: string
                        price:
                          type: string
                        originalPrice:
                          type: string
                        category:
                          type: string
                        addedAt:
                          type: string
                          format: date-time
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /cart/add/{productId}:
    post:
      tags:
        - Cart
      summary: Add to cart (Basic Auth)
      description: Add product to cart using basic authentication
      operationId: addToCartBasicAuth
      security:
        - basicAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  default: 1
      responses:
        '200':
          description: Product added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product added to cart"
                  cartItem:
                    type: object
        '404':
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /cart/remove/{productId}:
    delete:
      tags:
        - Cart
      summary: Remove from cart (Basic Auth)
      description: Remove product from cart using basic authentication
      operationId: removeFromCartBasicAuth
      security:
        - basicAuth: []
      parameters:
        - name: productId
          in: path
          required: true
          description: Product ID
          schema:
            type: string
      responses:
        '200':
          description: Product removed from cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product removed from cart"
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /orders/myorders:
    get:
      tags:
        - Orders
      summary: Get my orders (Basic Auth)
      description: Get all orders for authenticated user using basic authentication
      operationId: getMyOrdersBasicAuth
      security:
        - basicAuth: []
      responses:
        '200':
          description: User's orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  orders:
                    type: array
                    items:
                      type: object
                      properties:
                        orderId:
                          type: string
                        totalAmount:
                          type: string
                        status:
                          type: string
                        createdAt:
                          type: string
                          format: date-time
                        items:
                          type: array
                          items:
                            $ref: '#/components/schemas/OrderItem'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /orders/completeOrder:
    post:
      tags:
        - Orders
      summary: Complete order (Basic Auth)
      description: Create order from cart items using basic authentication
      operationId: completeOrderBasicAuth
      security:
        - basicAuth: []
      responses:
        '200':
          description: Order completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Order completed successfully"
                  order:
                    type: object
        '400':
          description: Cart is empty
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      description: JWT token obtained from /api/auth/signin or /api/auth/signup
    basicAuth:
      type: apiKey
      in: header
      name: Authorization
      description: |
        Basic authentication using email:password format.
        Example: user@example.com:password123

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User ID
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User's full name

    Product:
      type: object
      properties:
        id:
          type: string
          description: Product ID
        productName:
          type: string
          description: Product name
        productDescription:
          type: string
          description: Product description
        category:
          type: string
          description: Product category
        actualPrice:
          type: string
          description: Original price before discount
        discountedPrice:
          type: string
          description: Current selling price
        discountPercentage:
          type: string
          description: Discount percentage
        rating:
          type: string
          description: Product rating (1-5)
        ratingCount:
          type: string
          description: Number of ratings
        brand:
          type: string
          description: Product brand
        aboutProduct:
          type: string
          description: Detailed product information
        imgUrl:
          type: string
          description: Product image URL
        productUrl:
          type: string
          description: Product page URL

    CartItem:
      type: object
      properties:
        id:
          type: string
          description: Cart item ID
        userId:
          type: string
          description: User ID
        productId:
          type: string
          description: Product ID
        quantity:
          type: integer
          description: Quantity in cart
        product:
          $ref: '#/components/schemas/Product'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    WishlistItem:
      type: object
      properties:
        id:
          type: string
          description: Wishlist item ID
        userId:
          type: string
          description: User ID
        productId:
          type: string
          description: Product ID
        product:
          $ref: '#/components/schemas/Product'
        createdAt:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          description: Order ID
        userId:
          type: string
          description: User ID
        totalAmount:
          type: string
          description: Total order amount
        status:
          type: string
          enum:
            - pending
            - processing
            - completed
            - cancelled
          description: Order status
        createdAt:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'

    OrderItem:
      type: object
      properties:
        productId:
          type: string
          description: Product ID
        productName:
          type: string
          description: Product name
        price:
          type: string
          description: Price per unit
        quantity:
          type: integer
          description: Quantity ordered
        totalPrice:
          type: string
          description: Total price for this item

    Pagination:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        success:
          type: boolean
          description: Operation status
          example: false

  responses:
    UnauthorizedError:
      description: Authentication information is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'