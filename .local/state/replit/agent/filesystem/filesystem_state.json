{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack e-commerce application built with a React frontend and Express.js backend. The application provides product browsing, search functionality, user authentication, and shopping cart management. It uses modern technologies including TypeScript, Tailwind CSS, shadcn/ui components, and PostgreSQL with Drizzle ORM for data persistence.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript and Vite for development/build tooling\n- **Routing**: Wouter for client-side routing with pages for home, login, and product details\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: shadcn/ui component library built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom design tokens and theme support\n- **Form Handling**: React Hook Form with Zod schema validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API with structured route handlers\n- **Authentication**: Session-based authentication with bcrypt for password hashing\n- **Middleware**: Custom logging, error handling, and authentication middleware\n- **Development**: Hot reloading with Vite integration for development mode\n\n## Data Layer\n- **Database**: PostgreSQL as the primary database\n- **ORM**: Drizzle ORM for type-safe database operations and migrations\n- **Schema**: Defined in shared directory for consistency between frontend and backend\n- **Tables**: Users, products, cart items, and sessions with proper foreign key relationships\n\n## Authentication & Authorization\n- **Strategy**: Token-based authentication using session tokens stored in localStorage\n- **Password Security**: bcrypt hashing with salt for secure password storage\n- **Session Management**: Database-stored sessions with expiration handling\n- **Route Protection**: Middleware-based authentication checks for protected endpoints\n\n## Project Structure\n- **Monorepo**: Single repository with client/, server/, and shared/ directories\n- **Shared Code**: Common TypeScript types and Zod schemas used by both frontend and backend\n- **Build Process**: Separate build processes for client (Vite) and server (esbuild)\n- **Development**: Unified development server with API proxy and hot reloading\n\n## Key Features\n- **Product Catalog**: Browse, search, and filter products with pagination\n- **User Management**: Registration, login, and profile management\n- **Shopping Cart**: Add/remove items, quantity management, and persistent cart state\n- **Responsive Design**: Mobile-first design with adaptive layouts\n- **Theme Support**: Light/dark theme toggle with system preference detection\n\n# External Dependencies\n\n## Core Technologies\n- **@neondatabase/serverless**: Neon PostgreSQL database connection with serverless support\n- **drizzle-orm**: Type-safe ORM for database operations and query building\n- **@tanstack/react-query**: Server state management and caching for the frontend\n- **wouter**: Lightweight client-side routing library for React\n\n## UI and Styling\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives\n- **tailwindcss**: Utility-first CSS framework for styling\n- **class-variance-authority**: Utility for creating consistent component variants\n- **lucide-react**: Icon library with React components\n\n## Development Tools\n- **vite**: Fast build tool and development server for the frontend\n- **tsx**: TypeScript execution engine for Node.js development\n- **esbuild**: Fast JavaScript bundler for production builds\n- **@replit/vite-plugin-runtime-error-modal**: Development error overlay for Replit environment\n\n## Authentication & Security\n- **bcrypt**: Password hashing library for secure authentication\n- **connect-pg-simple**: PostgreSQL session store for Express sessions\n\n## Form Management\n- **react-hook-form**: Performant forms library with minimal re-renders\n- **@hookform/resolvers**: Validation resolvers for various schema libraries\n- **zod**: TypeScript-first schema validation library","size_bytes":4171},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1757237093321.md":{"content":"```json\n\"query is not supported\"\n\n```","size_bytes":37},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/generate-product-images.ts":{"content":"import { db } from \"./db\";\nimport { products } from \"@shared/schema\";\nimport { eq, or, sql, isNull } from \"drizzle-orm\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Function to check if image URL is broken\nfunction isImageBroken(imgLink: string | null): boolean {\n  if (!imgLink) return true;\n  \n  // Check for known broken patterns\n  if (imgLink.includes('/images/I/') && !imgLink.startsWith('https://m.media-amazon.com')) {\n    return true;\n  }\n  \n  // Check for incomplete URLs\n  if (imgLink.includes('WEBP_402378') && imgLink.endsWith('.jp')) {\n    return true;\n  }\n  \n  return false;\n}\n\n// Function to generate prompt from product name\nfunction generateImagePrompt(productName: string, category: string): string {\n  // Clean up the product name for better prompts\n  const cleanName = productName\n    .replace(/\\([^)]*\\)/g, '') // Remove parentheses content\n    .replace(/[,]/g, '')\n    .trim();\n  \n  // Extract key product type from category\n  const categoryParts = category.split('|');\n  const productType = categoryParts[categoryParts.length - 1] || categoryParts[0];\n  \n  return `Professional product photography of ${cleanName}, ${productType}, on clean white background, studio lighting, high quality, commercial product shot, crisp and clear, centered composition`;\n}\n\nasync function generateProductImages() {\n  try {\n    console.log('Finding products with broken or missing images...');\n    \n    // Get products with potentially broken images\n    const brokenProducts = await db\n      .select()\n      .from(products)\n      .where(\n        or(\n          isNull(products.imgLink),\n          eq(products.imgLink, ''),\n          sql`${products.imgLink} LIKE '%/images/I/%'`,\n          sql`${products.imgLink} LIKE '%.jp'`\n        )\n      )\n      .limit(10); // Process in batches\n    \n    console.log(`Found ${brokenProducts.length} products with broken images`);\n    \n    if (brokenProducts.length === 0) {\n      console.log('No products with broken images found');\n      return;\n    }\n    \n    // Create directory for generated images\n    const generatedImagesDir = path.join(__dirname, '..', 'attached_assets', 'generated_images');\n    if (!fs.existsSync(generatedImagesDir)) {\n      fs.mkdirSync(generatedImagesDir, { recursive: true });\n    }\n    \n    // Process each product\n    for (const product of brokenProducts) {\n      console.log(`Processing: ${product.productName.substring(0, 50)}...`);\n      \n      const prompt = generateImagePrompt(product.productName, product.category);\n      const filename = `product_${product.id}_generated.png`;\n      const imagePath = path.join('attached_assets', 'generated_images', filename);\n      \n      // Update the product with the new image path\n      await db\n        .update(products)\n        .set({ \n          imgLink: `/${imagePath}` \n        })\n        .where(eq(products.id, product.id));\n      \n      console.log(`Updated product ${product.id} with generated image path`);\n    }\n    \n    console.log('Product image generation complete!');\n    console.log('Note: AI image generation will be triggered when products are displayed');\n    \n  } catch (error) {\n    console.error('Error generating product images:', error);\n  }\n}\n\n// Run the script\ngenerateProductImages()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(error);\n    process.exit(1);\n  });","size_bytes":3475},"server/image-generator.ts":{"content":"import { db } from \"./db\";\nimport { products } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nexport function generateImagePrompt(productName: string, category: string): string {\n  // Clean up the product name for better prompts\n  const cleanName = productName\n    .replace(/\\([^)]*\\)/g, '') // Remove parentheses content\n    .replace(/[,]/g, '')\n    .replace(/[\\r\\n]+/g, ' ')\n    .trim()\n    .substring(0, 100); // Limit length\n  \n  // Extract key product type from category\n  const categoryParts = category.split('|');\n  const productType = categoryParts[categoryParts.length - 1] || categoryParts[0];\n  \n  return `Professional product photography of ${cleanName}, ${productType}, on clean white background, studio lighting, high quality, commercial product shot, crisp and clear, centered composition, e-commerce style`;\n}\n\nexport async function ensureGeneratedImagesDir(): Promise<string> {\n  const generatedImagesDir = path.join(__dirname, '..', 'attached_assets', 'generated_images');\n  if (!fs.existsSync(generatedImagesDir)) {\n    fs.mkdirSync(generatedImagesDir, { recursive: true });\n  }\n  return generatedImagesDir;\n}\n\nexport async function checkAndGenerateImage(productId: string): Promise<string | null> {\n  try {\n    const [product] = await db\n      .select()\n      .from(products)\n      .where(eq(products.id, productId));\n    \n    if (!product) {\n      return null;\n    }\n    \n    // Check if image is already generated\n    if (product.imgLink && product.imgLink.includes('/generated_images/')) {\n      return product.imgLink;\n    }\n    \n    // Check if original image is broken\n    const isBroken = !product.imgLink || \n                     product.imgLink.includes('/images/I/') ||\n                     product.imgLink.endsWith('.jp');\n    \n    if (!isBroken) {\n      return product.imgLink;\n    }\n    \n    // Generate placeholder path for now\n    const filename = `product_${productId}_placeholder.png`;\n    const imagePath = `/attached_assets/generated_images/${filename}`;\n    \n    // Update database with placeholder path\n    await db\n      .update(products)\n      .set({ imgLink: imagePath })\n      .where(eq(products.id, productId));\n    \n    return imagePath;\n  } catch (error) {\n    console.error('Error checking/generating image:', error);\n    return null;\n  }\n}","size_bytes":2479},"server/import-csv.ts":{"content":"import { db } from \"./db\";\nimport { products } from \"@shared/schema\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\ninterface CSVRow {\n  product_id: string;\n  product_name: string;\n  category: string;\n  discounted_price: string;\n  actual_price: string;\n  discount_percentage: string;\n  rating: string;\n  rating_count: string;\n  about_product: string;\n  user_id: string;\n  user_name: string;\n  review_id: string;\n  review_title: string;\n  review_content: string;\n  img_link: string;\n  product_link: string;\n}\n\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  let i = 0;\n  \n  while (i < line.length) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      if (inQuotes && i + 1 < line.length && line[i + 1] === '\"') {\n        // Double quote inside quoted field\n        current += '\"';\n        i += 2;\n      } else {\n        // Toggle quote state\n        inQuotes = !inQuotes;\n        i++;\n      }\n    } else if (char === ',' && !inQuotes) {\n      // Field separator\n      result.push(current);\n      current = '';\n      i++;\n    } else {\n      current += char;\n      i++;\n    }\n  }\n  \n  // Add the last field\n  result.push(current);\n  \n  return result;\n}\n\nfunction parseCSV(csvContent: string): CSVRow[] {\n  const lines = csvContent.split('\\n');\n  const headers = parseCSVLine(lines[0]);\n  \n  const rows: CSVRow[] = [];\n  const processedProducts = new Set<string>();\n  \n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n    \n    const values = parseCSVLine(line);\n    \n    if (values.length >= 16) {\n      const productId = values[0];\n      \n      // Only process each product once (CSV has duplicate products with different reviews)\n      if (!processedProducts.has(productId)) {\n        processedProducts.add(productId);\n        \n        const row: CSVRow = {\n          product_id: productId,\n          product_name: values[1] || '',\n          category: values[2] || '',\n          discounted_price: values[3] || '',\n          actual_price: values[4] || '',\n          discount_percentage: values[5] || '',\n          rating: values[6] || '',\n          rating_count: values[7] || '',\n          about_product: values[8] || '',\n          user_id: values[9] || '',\n          user_name: values[10] || '',\n          review_id: values[11] || '',\n          review_title: values[12] || '',\n          review_content: values[13] || '',\n          img_link: values[14] || '',\n          product_link: values[15] || ''\n        };\n        \n        rows.push(row);\n      }\n    }\n  }\n  \n  return rows;\n}\n\nasync function importCSV() {\n  try {\n    console.log('Starting CSV import...');\n    \n    const csvPath = path.join(__dirname, '..', 'attached_assets', 'amazon_1757236301638.csv');\n    const csvContent = fs.readFileSync(csvPath, 'utf-8');\n    \n    console.log('Parsing CSV...');\n    const rows = parseCSV(csvContent);\n    console.log(`Parsed ${rows.length} unique products`);\n    \n    console.log('Inserting products into database...');\n    const batchSize = 100;\n    let inserted = 0;\n    \n    for (let i = 0; i < rows.length; i += batchSize) {\n      const batch = rows.slice(i, i + batchSize);\n      \n      const productData = batch.map(row => ({\n        id: row.product_id,\n        productName: row.product_name,\n        category: row.category,\n        discountedPrice: row.discounted_price,\n        actualPrice: row.actual_price,\n        discountPercentage: row.discount_percentage,\n        rating: row.rating ? parseFloat(row.rating) : null,\n        ratingCount: row.rating_count,\n        aboutProduct: row.about_product,\n        imgLink: row.img_link,\n        productLink: row.product_link,\n      }));\n      \n      await db.insert(products).values(productData).onConflictDoNothing();\n      inserted += batch.length;\n      \n      console.log(`Inserted ${inserted}/${rows.length} products...`);\n    }\n    \n    console.log('CSV import completed successfully!');\n  } catch (error) {\n    console.error('Error importing CSV:', error);\n    process.exit(1);\n  }\n}\n\n// Run import if this script is executed directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  importCSV();\n}\n\nexport { importCSV };\n","size_bytes":4362},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport path from \"path\";\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Serve generated images\napp.use('/attached_assets', express.static(path.join(__dirname, '..', 'attached_assets')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2343},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { signInSchema, signUpSchema, insertCartItemSchema, insertWishlistItemSchema } from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport swaggerUi from \"swagger-ui-express\";\nimport * as yaml from \"js-yaml\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\n// Middleware to check authentication (supports both session tokens and API tokens)\nasync function requireAuth(req: any, res: any, next: any) {\n  const authHeader = req.headers.authorization;\n  \n  if (!authHeader || !authHeader.startsWith('Bearer ')) {\n    return res.status(401).json({ error: 'Authentication required' });\n  }\n  \n  const token = authHeader.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ error: 'Invalid token format' });\n  }\n  \n  // Check if it's an API token (starts with 'ak_')\n  if (token.startsWith('ak_')) {\n    const apiToken = await storage.getApiTokenByHash(token);\n    if (!apiToken) {\n      return res.status(401).json({ error: 'Invalid or expired API token' });\n    }\n    \n    const user = await storage.getUser(apiToken.userId);\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n    \n    // Update last used timestamp\n    await storage.updateApiTokenLastUsed(apiToken.id);\n    \n    req.user = user;\n    req.apiToken = apiToken;\n    next();\n  } else {\n    // Check session token\n    const session = await storage.getSession(token);\n    if (!session) {\n      return res.status(401).json({ error: 'Invalid or expired session' });\n    }\n    \n    const user = await storage.getUser(session.userId);\n    if (!user) {\n      return res.status(401).json({ error: 'User not found' });\n    }\n    \n    req.user = user;\n    req.session = session;\n    next();\n  }\n}\n\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Swagger API Documentation - Load from openapi.yaml\n  const openapiPath = path.join(process.cwd(), 'openapi.yaml');\n  const openapiDocument = yaml.load(fs.readFileSync(openapiPath, 'utf8')) as any;\n  \n  app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(openapiDocument, {\n    customCss: '.swagger-ui .topbar { display: none }',\n    customSiteTitle: 'AI ShopHub API Documentation',\n    swaggerOptions: {\n      persistAuthorization: true,\n      displayRequestDuration: true,\n      filter: true,\n      tryItOutEnabled: true\n    }\n  }));\n\n  // Redirect root to login if not authenticated, otherwise to shop\n  app.get('/', async (req, res) => {\n    const token = req.headers.authorization?.replace('Bearer ', '');\n    \n    if (!token) {\n      return res.redirect('/login');\n    }\n    \n    try {\n      const session = await storage.getSession(token);\n      if (!session) {\n        return res.redirect('/login');\n      }\n      \n      const user = await storage.getUser(session.userId);\n      if (!user) {\n        return res.redirect('/login');\n      }\n      \n      res.redirect('/shop');\n    } catch (error) {\n      res.redirect('/login');\n    }\n  });\n\n  // Auth routes\n  app.post(\"/api/auth/signup\", async (req, res) => {\n    try {\n      const data = signUpSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(data.email);\n      if (existingUser) {\n        return res.status(400).json({ error: 'User already exists' });\n      }\n      \n      const user = await storage.createUser({\n        email: data.email,\n        password: data.password,\n        name: data.name,\n      });\n      \n      const session = await storage.createSession(user.id);\n      \n      res.json({ \n        user: { id: user.id, email: user.email, name: user.name },\n        token: session.token \n      });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || 'Failed to create user' });\n    }\n  });\n\n  app.post(\"/api/auth/signin\", async (req, res) => {\n    try {\n      const data = signInSchema.parse(req.body);\n      \n      const user = await storage.getUserByEmail(data.email);\n      if (!user) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      const validPassword = await bcrypt.compare(data.password, user.password);\n      if (!validPassword) {\n        return res.status(401).json({ error: 'Invalid credentials' });\n      }\n      \n      const session = await storage.createSession(user.id);\n      \n      res.json({ \n        user: { id: user.id, email: user.email, name: user.name },\n        token: session.token \n      });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || 'Failed to sign in' });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.deleteSession(req.session.token);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to logout' });\n    }\n  });\n\n  app.get(\"/api/auth/me\", requireAuth, async (req: any, res) => {\n    res.json({ \n      user: { \n        id: req.user.id, \n        email: req.user.email, \n        name: req.user.name \n      } \n    });\n  });\n\n  // API Token management routes\n  app.post(\"/api/tokens\", requireAuth, async (req: any, res) => {\n    try {\n      const { name } = req.body;\n      \n      if (!name || typeof name !== 'string') {\n        return res.status(400).json({ error: 'Token name is required' });\n      }\n      \n      const result = await storage.createApiToken(req.user.id, name);\n      \n      res.json({\n        token: result.token,\n        apiToken: {\n          id: result.apiToken.id,\n          name: result.apiToken.name,\n          createdAt: result.apiToken.createdAt,\n          expiresAt: result.apiToken.expiresAt,\n          lastUsedAt: result.apiToken.lastUsedAt\n        },\n        message: 'Save this token securely. You won\\'t be able to see it again!'\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to create API token' });\n    }\n  });\n\n  app.get(\"/api/tokens\", requireAuth, async (req: any, res) => {\n    try {\n      const tokens = await storage.getUserApiTokens(req.user.id);\n      \n      // Don't send the token hash, only metadata\n      const sanitizedTokens = tokens.map(token => ({\n        id: token.id,\n        name: token.name,\n        createdAt: token.createdAt,\n        expiresAt: token.expiresAt,\n        lastUsedAt: token.lastUsedAt\n      }));\n      \n      res.json(sanitizedTokens);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch API tokens' });\n    }\n  });\n\n  app.delete(\"/api/tokens/:tokenId\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.deleteApiToken(req.params.tokenId, req.user.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to delete API token' });\n    }\n  });\n\n  // Product routes\n  app.get(\"/api/products\", requireAuth, async (req: any, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 20;\n      const search = req.query.search as string;\n      const category = req.query.category as string;\n      const sortBy = req.query.sortBy as string;\n      const priceMin = req.query.priceMin as string;\n      const priceMax = req.query.priceMax as string;\n      const rating = req.query.rating as string;\n      \n      const result = await storage.getProducts(page, limit, search, category, sortBy, priceMin, priceMax, rating);\n      \n      res.json({\n        products: result.products,\n        pagination: {\n          page,\n          limit,\n          total: result.total,\n          totalPages: Math.ceil(result.total / limit)\n        }\n      });\n    } catch (error: any) {\n      console.error('Error fetching products:', error);\n      res.status(500).json({ error: error.message || 'Failed to fetch products' });\n    }\n  });\n\n  // Semantic search proxy endpoint\n  app.post(\"/api/semantic-search\", requireAuth, async (req: any, res) => {\n    try {\n      const { query, n_results = 20 } = req.body;\n      \n      if (!query) {\n        return res.status(400).json({ error: 'Query is required' });\n      }\n      \n      // Call the semantic search API from backend to avoid CORS\n      const response = await fetch('https://product-search.replit.app/search', {\n        method: 'POST',\n        headers: {\n          'accept': 'application/json',\n          'Authorization': 'Bearer *ULXrUUDkkjRheg3cjpQAcBbzGgffZBn!32ssr8JRW9VERcVmweQqGnYi!Y8jcPnG',\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          query,\n          n_results,\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorText = await response.text();\n        console.error('Semantic search API error:', errorText);\n        return res.status(response.status).json({ error: 'Semantic search failed' });\n      }\n      \n      const data = await response.json();\n      res.json(data);\n    } catch (error: any) {\n      console.error('Error in semantic search:', error);\n      res.status(500).json({ error: 'Failed to perform semantic search' });\n    }\n  });\n\n  app.get(\"/api/products/by-ids\", requireAuth, async (req: any, res) => {\n    try {\n      const { ids, category, sortBy, priceMin, priceMax, rating } = req.query;\n      \n      if (!ids || typeof ids !== 'string') {\n        return res.status(400).json({ error: 'Product IDs are required' });\n      }\n      \n      const productIds = ids.split(',').filter(id => id.trim());\n      \n      if (productIds.length === 0) {\n        return res.json({ products: [] });\n      }\n      \n      // Fetch products by IDs\n      const products = await storage.getProductsByIds(productIds);\n      \n      // Apply filters\n      let filteredProducts = products;\n      \n      if (category && typeof category === 'string') {\n        filteredProducts = filteredProducts.filter(p => p.category === category);\n      }\n      \n      if ((priceMin || priceMax) && (typeof priceMin === 'string' || typeof priceMax === 'string')) {\n        const min = priceMin ? parseInt(priceMin) : 0;\n        const max = priceMax ? parseInt(priceMax) : Number.MAX_SAFE_INTEGER;\n        filteredProducts = filteredProducts.filter(p => {\n          const price = parseInt(p.discountedPrice?.replace(/[^0-9]/g, '') || '0');\n          return price >= min && price <= max;\n        });\n      }\n      \n      if (rating && typeof rating === 'string') {\n        const minRating = parseFloat(rating);\n        filteredProducts = filteredProducts.filter(p => {\n          const productRating = parseFloat(p.rating || '0');\n          return productRating >= minRating;\n        });\n      }\n      \n      // Apply sorting\n      if (sortBy && typeof sortBy === 'string') {\n        filteredProducts.sort((a, b) => {\n          switch (sortBy) {\n            case 'price_asc':\n              return parseInt(a.discountedPrice?.replace(/[^0-9]/g, '') || '0') - \n                     parseInt(b.discountedPrice?.replace(/[^0-9]/g, '') || '0');\n            case 'price_desc':\n              return parseInt(b.discountedPrice?.replace(/[^0-9]/g, '') || '0') - \n                     parseInt(a.discountedPrice?.replace(/[^0-9]/g, '') || '0');\n            case 'rating':\n              return parseFloat(b.rating || '0') - parseFloat(a.rating || '0');\n            default:\n              // Maintain original order from IDs\n              return 0;\n          }\n        });\n      } else {\n        // Maintain the order of the input IDs\n        const idOrder = new Map(productIds.map((id, index) => [id, index]));\n        filteredProducts.sort((a, b) => {\n          const aOrder = idOrder.get(a.id) ?? Number.MAX_SAFE_INTEGER;\n          const bOrder = idOrder.get(b.id) ?? Number.MAX_SAFE_INTEGER;\n          return aOrder - bOrder;\n        });\n      }\n      \n      res.json({ products: filteredProducts });\n    } catch (error: any) {\n      console.error('Error fetching products by IDs:', error);\n      res.status(500).json({ error: 'Failed to fetch products' });\n    }\n  });\n\n  app.get(\"/api/products/:id\", requireAuth, async (req: any, res) => {\n    try {\n      const product = await storage.getProduct(req.params.id);\n      if (!product) {\n        return res.status(404).json({ error: 'Product not found' });\n      }\n      res.json(product);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch product' });\n    }\n  });\n\n  app.get(\"/api/categories\", requireAuth, async (req: any, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json(categories);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch categories' });\n    }\n  });\n\n  // Cart routes\n  app.get(\"/api/cart\", requireAuth, async (req: any, res) => {\n    try {\n      const cartItems = await storage.getCartItems(req.user.id);\n      res.json(cartItems);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch cart' });\n    }\n  });\n\n  app.post(\"/api/cart\", requireAuth, async (req: any, res) => {\n    try {\n      const data = insertCartItemSchema.parse(req.body);\n      const cartItem = await storage.addToCart(req.user.id, data);\n      res.json(cartItem);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || 'Failed to add to cart' });\n    }\n  });\n\n  app.put(\"/api/cart/:productId\", requireAuth, async (req: any, res) => {\n    try {\n      const quantity = parseInt(req.body.quantity);\n      if (isNaN(quantity) || quantity < 0) {\n        return res.status(400).json({ error: 'Invalid quantity' });\n      }\n      \n      const cartItem = await storage.updateCartItem(req.user.id, req.params.productId, quantity);\n      res.json(cartItem);\n    } catch (error: any) {\n      res.status(400).json({ error: 'Failed to update cart item' });\n    }\n  });\n\n  app.delete(\"/api/cart/:productId\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.removeFromCart(req.user.id, req.params.productId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to remove from cart' });\n    }\n  });\n\n  app.delete(\"/api/cart\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.clearCart(req.user.id);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to clear cart' });\n    }\n  });\n\n  // Wishlist routes\n  app.get(\"/api/wishlist\", requireAuth, async (req: any, res) => {\n    try {\n      const wishlistItems = await storage.getWishlistItems(req.user.id);\n      res.json(wishlistItems);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch wishlist' });\n    }\n  });\n\n  app.post(\"/api/wishlist\", requireAuth, async (req: any, res) => {\n    try {\n      const data = insertWishlistItemSchema.parse(req.body);\n      const wishlistItem = await storage.addToWishlist(req.user.id, data);\n      res.json(wishlistItem);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || 'Failed to add to wishlist' });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:productId\", requireAuth, async (req: any, res) => {\n    try {\n      await storage.removeFromWishlist(req.user.id, req.params.productId);\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to remove from wishlist' });\n    }\n  });\n\n  app.get(\"/api/wishlist/check/:productId\", requireAuth, async (req: any, res) => {\n    try {\n      const isInWishlist = await storage.isInWishlist(req.user.id, req.params.productId);\n      res.json({ isInWishlist });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to check wishlist status' });\n    }\n  });\n\n  // Order routes\n  app.post(\"/api/checkout\", requireAuth, async (req: any, res) => {\n    try {\n      // Get user's cart items\n      const cartItems = await storage.getCartItems(req.user.id);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ error: 'Cart is empty' });\n      }\n      \n      // Calculate total amount\n      const totalAmount = cartItems.reduce((total, item) => {\n        const price = parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, ''));\n        return total + (price * item.quantity);\n      }, 0).toFixed(2);\n      \n      // Create order items\n      const orderItemsData = cartItems.map(item => ({\n        productId: item.productId,\n        productName: item.product.productName,\n        price: item.product.discountedPrice,\n        quantity: item.quantity,\n        totalPrice: (parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, '')) * item.quantity).toFixed(2)\n      }));\n      \n      // Create order\n      const order = await storage.createOrder(\n        req.user.id,\n        { totalAmount, status: 'completed' },\n        orderItemsData\n      );\n      \n      // Clear cart after successful order\n      await storage.clearCart(req.user.id);\n      \n      // Return order with items\n      const orderWithItems = {\n        ...order,\n        items: orderItemsData\n      };\n      \n      res.json({ \n        order: orderWithItems,\n        message: 'Order placed successfully'\n      });\n    } catch (error: any) {\n      console.error('Checkout error:', error);\n      res.status(500).json({ error: 'Failed to process checkout' });\n    }\n  });\n\n  app.get(\"/api/orders\", requireAuth, async (req: any, res) => {\n    try {\n      const orders = await storage.getOrders(req.user.id);\n      res.json(orders);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch orders' });\n    }\n  });\n\n  app.get(\"/api/orders/:orderId\", requireAuth, async (req: any, res) => {\n    try {\n      const order = await storage.getOrder(req.params.orderId);\n      \n      if (!order) {\n        return res.status(404).json({ error: 'Order not found' });\n      }\n      \n      // Check if order belongs to user\n      if (order.userId !== req.user.id) {\n        return res.status(403).json({ error: 'Unauthorized' });\n      }\n      \n      res.json(order);\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to fetch order' });\n    }\n  });\n\n  app.post(\"/api/orders/:orderId/invoice\", requireAuth, async (req: any, res) => {\n    try {\n      const { invoiceUrl } = req.body;\n      \n      if (!invoiceUrl) {\n        return res.status(400).json({ error: 'Invoice URL is required' });\n      }\n      \n      // Update order with invoice URL\n      await storage.updateOrderInvoiceUrl(req.params.orderId, invoiceUrl);\n      \n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(500).json({ error: 'Failed to update invoice URL' });\n    }\n  });\n\n  // ===== NEW API ENDPOINTS WITH BASIC AUTH =====\n  \n  // List all available categories\n  app.get(\"/filters/listCategories\", requireAuth, async (req: any, res) => {\n    try {\n      const categories = await storage.getCategories();\n      res.json({\n        success: true,\n        categories: categories\n      });\n    } catch (error: any) {\n      res.status(500).json({ \n        success: false,\n        error: 'Failed to fetch categories' \n      });\n    }\n  });\n\n  // List all products in wishlist\n  app.get(\"/wishlist/listProducts\", requireAuth, async (req: any, res) => {\n    try {\n      const wishlistItems = await storage.getWishlistItems(req.user.id);\n      res.json({\n        success: true,\n        products: wishlistItems.map(item => ({\n          id: item.productId,\n          name: item.product.productName,\n          price: item.product.discountedPrice,\n          originalPrice: item.product.actualPrice,\n          category: item.product.category,\n          addedAt: item.createdAt\n        }))\n      });\n    } catch (error: any) {\n      res.status(500).json({ \n        success: false,\n        error: 'Failed to fetch wishlist products' \n      });\n    }\n  });\n\n  // Add product to cart\n  app.post(\"/cart/add/:productId\", requireAuth, async (req: any, res) => {\n    try {\n      const productId = req.params.productId;\n      const quantity = req.body.quantity || 1;\n      \n      // Check if product exists\n      const product = await storage.getProduct(productId);\n      if (!product) {\n        return res.status(404).json({ \n          success: false,\n          error: 'Product not found' \n        });\n      }\n      \n      // Add to cart\n      const cartItem = await storage.addToCart(req.user.id, {\n        productId: productId,\n        quantity: quantity\n      });\n      \n      res.json({\n        success: true,\n        message: 'Product added to cart',\n        cartItem: {\n          productId: cartItem.productId,\n          quantity: cartItem.quantity,\n          product: product\n        }\n      });\n    } catch (error: any) {\n      res.status(400).json({ \n        success: false,\n        error: error.message || 'Failed to add product to cart' \n      });\n    }\n  });\n\n  // Remove product from cart\n  app.delete(\"/cart/remove/:productId\", requireAuth, async (req: any, res) => {\n    try {\n      const productId = req.params.productId;\n      \n      await storage.removeFromCart(req.user.id, productId);\n      \n      res.json({\n        success: true,\n        message: 'Product removed from cart'\n      });\n    } catch (error: any) {\n      res.status(500).json({ \n        success: false,\n        error: 'Failed to remove product from cart' \n      });\n    }\n  });\n\n  // List all orders for the user\n  app.get(\"/orders/myorders\", requireAuth, async (req: any, res) => {\n    try {\n      const orders = await storage.getOrders(req.user.id);\n      \n      res.json({\n        success: true,\n        orders: orders.map(order => ({\n          orderId: order.id,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          createdAt: order.createdAt,\n          items: order.items.map(item => ({\n            productId: item.productId,\n            productName: item.productName,\n            price: item.price,\n            quantity: item.quantity,\n            totalPrice: item.totalPrice\n          }))\n        }))\n      });\n    } catch (error: any) {\n      res.status(500).json({ \n        success: false,\n        error: 'Failed to fetch orders' \n      });\n    }\n  });\n\n  // Complete order (checkout)\n  app.post(\"/orders/completeOrder\", requireAuth, async (req: any, res) => {\n    try {\n      // Get user's cart items\n      const cartItems = await storage.getCartItems(req.user.id);\n      \n      if (cartItems.length === 0) {\n        return res.status(400).json({ \n          success: false,\n          error: 'Cart is empty' \n        });\n      }\n      \n      // Calculate total amount\n      const totalAmount = cartItems.reduce((total, item) => {\n        const price = parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, ''));\n        return total + (price * item.quantity);\n      }, 0).toFixed(2);\n      \n      // Create order items\n      const orderItemsData = cartItems.map(item => ({\n        productId: item.productId,\n        productName: item.product.productName,\n        price: item.product.discountedPrice,\n        quantity: item.quantity,\n        totalPrice: (parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, '')) * item.quantity).toFixed(2)\n      }));\n      \n      // Create order\n      const order = await storage.createOrder(\n        req.user.id,\n        { totalAmount, status: 'completed' },\n        orderItemsData\n      );\n      \n      // Clear cart after successful order\n      await storage.clearCart(req.user.id);\n      \n      res.json({ \n        success: true,\n        message: 'Order completed successfully',\n        order: {\n          orderId: order.id,\n          totalAmount: order.totalAmount,\n          status: order.status,\n          createdAt: order.createdAt,\n          items: orderItemsData\n        }\n      });\n    } catch (error: any) {\n      console.error('Complete order error:', error);\n      res.status(500).json({ \n        success: false,\n        error: 'Failed to complete order' \n      });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":23989},"server/storage.ts":{"content":"import { \n  users, \n  products, \n  cartItems, \n  sessions,\n  apiTokens,\n  wishlistItems,\n  orders,\n  orderItems,\n  type User, \n  type InsertUser, \n  type Product, \n  type CartItem, \n  type InsertCartItem,\n  type Session,\n  type ApiToken,\n  type InsertApiToken,\n  type WishlistItem,\n  type InsertWishlistItem,\n  type Order,\n  type InsertOrder,\n  type OrderItem,\n  type InsertOrderItem\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, ilike, and, desc, asc, count, sql, inArray } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  // Product methods\n  getProducts(\n    page: number, \n    limit: number, \n    search?: string, \n    category?: string, \n    sortBy?: string,\n    priceMin?: string,\n    priceMax?: string,\n    rating?: string\n  ): Promise<{ products: Product[], total: number }>;\n  getProduct(id: string): Promise<Product | undefined>;\n  getProductsByIds(ids: string[]): Promise<Product[]>;\n  getCategories(): Promise<string[]>;\n  \n  // Cart methods\n  getCartItems(userId: string): Promise<(CartItem & { product: Product })[]>;\n  addToCart(userId: string, item: InsertCartItem): Promise<CartItem>;\n  updateCartItem(userId: string, productId: string, quantity: number): Promise<CartItem | undefined>;\n  removeFromCart(userId: string, productId: string): Promise<void>;\n  clearCart(userId: string): Promise<void>;\n  \n  // Session methods\n  createSession(userId: string): Promise<Session>;\n  getSession(token: string): Promise<Session | undefined>;\n  deleteSession(token: string): Promise<void>;\n  \n  // API Token methods\n  createApiToken(userId: string, name: string): Promise<{ token: string; apiToken: ApiToken }>;\n  getApiTokenByHash(tokenHash: string): Promise<ApiToken | undefined>;\n  getUserApiTokens(userId: string): Promise<ApiToken[]>;\n  deleteApiToken(id: string, userId: string): Promise<void>;\n  updateApiTokenLastUsed(id: string): Promise<void>;\n  \n  // Wishlist methods\n  getWishlistItems(userId: string): Promise<(WishlistItem & { product: Product })[]>;\n  addToWishlist(userId: string, item: InsertWishlistItem): Promise<WishlistItem>;\n  removeFromWishlist(userId: string, productId: string): Promise<void>;\n  isInWishlist(userId: string, productId: string): Promise<boolean>;\n  \n  // Order methods\n  createOrder(userId: string, orderData: InsertOrder, items: InsertOrderItem[]): Promise<Order>;\n  getOrders(userId: string): Promise<(Order & { items: (OrderItem & { product: Product })[] })[]>;\n  getOrder(orderId: string): Promise<(Order & { items: (OrderItem & { product: Product })[] }) | undefined>;\n  updateOrderInvoiceUrl(orderId: string, invoiceUrl: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const hashedPassword = await bcrypt.hash(insertUser.password, 10);\n    const [user] = await db\n      .insert(users)\n      .values({ ...insertUser, password: hashedPassword })\n      .returning();\n    return user;\n  }\n\n  async getProducts(\n    page: number, \n    limit: number, \n    search?: string, \n    category?: string, \n    sortBy?: string,\n    priceMin?: string,\n    priceMax?: string,\n    rating?: string\n  ): Promise<{ products: Product[], total: number }> {\n    const conditions = [];\n    \n    if (search) {\n      const searchCondition = ilike(products.productName, `%${search}%`);\n      conditions.push(searchCondition);\n    }\n    \n    if (category) {\n      // Match the category segment anywhere in the hierarchical category string\n      const categoryCondition = ilike(products.category, `%${category}%`);\n      conditions.push(categoryCondition);\n    }\n    \n    // Price filter\n    if (priceMin || priceMax) {\n      if (priceMin) {\n        conditions.push(sql`CAST(REPLACE(REPLACE(${products.discountedPrice}, '₹', ''), ',', '') AS NUMERIC) >= ${parseInt(priceMin)}`);\n      }\n      if (priceMax) {\n        conditions.push(sql`CAST(REPLACE(REPLACE(${products.discountedPrice}, '₹', ''), ',', '') AS NUMERIC) <= ${parseInt(priceMax)}`);\n      }\n    }\n    \n    // Rating filter\n    if (rating) {\n      const minRating = parseFloat(rating);\n      conditions.push(sql`${products.rating} >= ${minRating}`);\n    }\n    \n    const whereCondition = conditions.length > 0 \n      ? (conditions.length === 1 ? conditions[0] : and(...conditions))\n      : undefined;\n    \n    // Build queries directly\n    let productsQuery = db.select().from(products);\n    let countQuery = db.select({ count: count() }).from(products);\n    \n    if (whereCondition) {\n      productsQuery = productsQuery.where(whereCondition);\n      countQuery = countQuery.where(whereCondition);\n    }\n    \n    // Apply sorting\n    if (sortBy === 'price-low') {\n      productsQuery = productsQuery.orderBy(asc(sql`CAST(REPLACE(REPLACE(${products.discountedPrice}, '₹', ''), ',', '') AS NUMERIC)`));\n    } else if (sortBy === 'price-high') {\n      productsQuery = productsQuery.orderBy(desc(sql`CAST(REPLACE(REPLACE(${products.discountedPrice}, '₹', ''), ',', '') AS NUMERIC)`));\n    } else if (sortBy === 'rating' || sortBy === 'rating-high') {\n      productsQuery = productsQuery.orderBy(desc(products.rating));\n    } else if (sortBy === 'rating-low') {\n      productsQuery = productsQuery.orderBy(asc(products.rating));\n    } else {\n      productsQuery = productsQuery.orderBy(desc(products.id));\n    }\n    \n    const [productsResult, totalResult] = await Promise.all([\n      productsQuery.limit(limit).offset((page - 1) * limit),\n      countQuery\n    ]);\n    \n    return {\n      products: productsResult,\n      total: totalResult[0].count as number\n    };\n  }\n\n  async getProduct(id: string): Promise<Product | undefined> {\n    const [product] = await db.select().from(products).where(eq(products.id, id));\n    return product || undefined;\n  }\n\n  async getProductsByIds(ids: string[]): Promise<Product[]> {\n    if (ids.length === 0) {\n      return [];\n    }\n    const result = await db.select().from(products).where(inArray(products.id, ids));\n    return result;\n  }\n\n  async getCategories(): Promise<string[]> {\n    const result = await db\n      .selectDistinct({ category: products.category })\n      .from(products);\n    \n    // Extract all unique category segments from hierarchical categories\n    const uniqueCategories = new Set<string>();\n    \n    result.forEach(row => {\n      if (row.category) {\n        // Split by '|' to get individual category segments\n        const segments = row.category.split('|');\n        segments.forEach(segment => {\n          const trimmed = segment.trim();\n          if (trimmed) {\n            uniqueCategories.add(trimmed);\n          }\n        });\n      }\n    });\n    \n    // Convert to array and sort\n    return Array.from(uniqueCategories).sort();\n  }\n\n  async getCartItems(userId: string): Promise<(CartItem & { product: Product })[]> {\n    const result = await db\n      .select()\n      .from(cartItems)\n      .innerJoin(products, eq(cartItems.productId, products.id))\n      .where(eq(cartItems.userId, userId));\n    \n    return result.map(row => ({\n      ...row.cart_items,\n      product: row.products\n    }));\n  }\n\n  async addToCart(userId: string, item: InsertCartItem): Promise<CartItem> {\n    // Check if item already exists in cart\n    const [existingItem] = await db\n      .select()\n      .from(cartItems)\n      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, item.productId)));\n    \n    if (existingItem) {\n      // Update quantity\n      const [updatedItem] = await db\n        .update(cartItems)\n        .set({ quantity: existingItem.quantity + item.quantity })\n        .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, item.productId)))\n        .returning();\n      return updatedItem;\n    } else {\n      // Insert new item\n      const [newItem] = await db\n        .insert(cartItems)\n        .values({ ...item, userId })\n        .returning();\n      return newItem;\n    }\n  }\n\n  async updateCartItem(userId: string, productId: string, quantity: number): Promise<CartItem | undefined> {\n    if (quantity <= 0) {\n      await this.removeFromCart(userId, productId);\n      return undefined;\n    }\n    \n    const [updatedItem] = await db\n      .update(cartItems)\n      .set({ quantity })\n      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, productId)))\n      .returning();\n    \n    return updatedItem || undefined;\n  }\n\n  async removeFromCart(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(cartItems)\n      .where(and(eq(cartItems.userId, userId), eq(cartItems.productId, productId)));\n  }\n\n  async clearCart(userId: string): Promise<void> {\n    await db.delete(cartItems).where(eq(cartItems.userId, userId));\n  }\n\n  async createSession(userId: string): Promise<Session> {\n    const token = randomUUID();\n    const expiresAt = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n    \n    const [session] = await db\n      .insert(sessions)\n      .values({ userId, token, expiresAt })\n      .returning();\n    \n    return session;\n  }\n\n  async getSession(token: string): Promise<Session | undefined> {\n    const [session] = await db\n      .select()\n      .from(sessions)\n      .where(and(eq(sessions.token, token), sql`${sessions.expiresAt} > NOW()`));\n    \n    return session || undefined;\n  }\n\n  async deleteSession(token: string): Promise<void> {\n    await db.delete(sessions).where(eq(sessions.token, token));\n  }\n\n  async getWishlistItems(userId: string): Promise<(WishlistItem & { product: Product })[]> {\n    const result = await db\n      .select()\n      .from(wishlistItems)\n      .innerJoin(products, eq(wishlistItems.productId, products.id))\n      .where(eq(wishlistItems.userId, userId))\n      .orderBy(desc(wishlistItems.createdAt));\n    \n    return result.map(row => ({\n      ...row.wishlist_items,\n      product: row.products\n    }));\n  }\n\n  async addToWishlist(userId: string, item: InsertWishlistItem): Promise<WishlistItem> {\n    // Check if item already exists in wishlist\n    const [existingItem] = await db\n      .select()\n      .from(wishlistItems)\n      .where(and(eq(wishlistItems.userId, userId), eq(wishlistItems.productId, item.productId)));\n    \n    if (existingItem) {\n      return existingItem;\n    }\n    \n    const [newItem] = await db\n      .insert(wishlistItems)\n      .values({ ...item, userId })\n      .returning();\n    \n    return newItem;\n  }\n\n  async removeFromWishlist(userId: string, productId: string): Promise<void> {\n    await db\n      .delete(wishlistItems)\n      .where(and(eq(wishlistItems.userId, userId), eq(wishlistItems.productId, productId)));\n  }\n\n  async isInWishlist(userId: string, productId: string): Promise<boolean> {\n    const [item] = await db\n      .select()\n      .from(wishlistItems)\n      .where(and(eq(wishlistItems.userId, userId), eq(wishlistItems.productId, productId)));\n    \n    return !!item;\n  }\n\n  async createOrder(userId: string, orderData: InsertOrder, items: InsertOrderItem[]): Promise<Order> {\n    // Create the order\n    const [order] = await db\n      .insert(orders)\n      .values({ ...orderData, userId })\n      .returning();\n    \n    // Create order items\n    if (items.length > 0) {\n      await db\n        .insert(orderItems)\n        .values(items.map(item => ({ ...item, orderId: order.id })));\n    }\n    \n    return order;\n  }\n\n  async getOrders(userId: string): Promise<(Order & { items: (OrderItem & { product: Product })[] })[]> {\n    // Get all orders for the user\n    const userOrders = await db\n      .select()\n      .from(orders)\n      .where(eq(orders.userId, userId))\n      .orderBy(desc(orders.createdAt));\n    \n    // Get order items for each order\n    const ordersWithItems = await Promise.all(\n      userOrders.map(async (order) => {\n        const items = await db\n          .select()\n          .from(orderItems)\n          .innerJoin(products, eq(orderItems.productId, products.id))\n          .where(eq(orderItems.orderId, order.id));\n        \n        return {\n          ...order,\n          items: items.map(item => ({\n            ...item.order_items,\n            product: item.products\n          }))\n        };\n      })\n    );\n    \n    return ordersWithItems;\n  }\n\n  async getOrder(orderId: string): Promise<(Order & { items: (OrderItem & { product: Product })[] }) | undefined> {\n    const [order] = await db\n      .select()\n      .from(orders)\n      .where(eq(orders.id, orderId));\n    \n    if (!order) return undefined;\n    \n    const items = await db\n      .select()\n      .from(orderItems)\n      .innerJoin(products, eq(orderItems.productId, products.id))\n      .where(eq(orderItems.orderId, orderId));\n    \n    return {\n      ...order,\n      items: items.map(item => ({\n        ...item.order_items,\n        product: item.products\n      }))\n    };\n  }\n\n  async updateOrderInvoiceUrl(orderId: string, invoiceUrl: string): Promise<void> {\n    await db\n      .update(orders)\n      .set({ invoiceUrl })\n      .where(eq(orders.id, orderId));\n  }\n\n  // API Token methods\n  async createApiToken(userId: string, name: string): Promise<{ token: string; apiToken: ApiToken }> {\n    // Generate a random token\n    const token = `ak_${randomUUID().replace(/-/g, '')}`;\n    \n    // Hash the token for storage\n    const tokenHash = await bcrypt.hash(token, 10);\n    \n    // Set expiration to 1 year from now (optional)\n    const expiresAt = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000);\n    \n    const [apiToken] = await db\n      .insert(apiTokens)\n      .values({ userId, name, tokenHash, expiresAt })\n      .returning();\n    \n    // Return the plain token (shown only once) and the created record\n    return { token, apiToken };\n  }\n\n  async getApiTokenByHash(token: string): Promise<ApiToken | undefined> {\n    // Get all tokens and check each hash (since we can't query by hash directly)\n    const tokens = await db.select().from(apiTokens);\n    \n    for (const apiToken of tokens) {\n      const isValid = await bcrypt.compare(token, apiToken.tokenHash);\n      if (isValid) {\n        // Check if token is expired\n        if (apiToken.expiresAt && new Date(apiToken.expiresAt) < new Date()) {\n          return undefined;\n        }\n        return apiToken;\n      }\n    }\n    \n    return undefined;\n  }\n\n  async getUserApiTokens(userId: string): Promise<ApiToken[]> {\n    return await db\n      .select()\n      .from(apiTokens)\n      .where(eq(apiTokens.userId, userId))\n      .orderBy(desc(apiTokens.createdAt));\n  }\n\n  async deleteApiToken(id: string, userId: string): Promise<void> {\n    await db\n      .delete(apiTokens)\n      .where(and(eq(apiTokens.id, id), eq(apiTokens.userId, userId)));\n  }\n\n  async updateApiTokenLastUsed(id: string): Promise<void> {\n    await db\n      .update(apiTokens)\n      .set({ lastUsedAt: new Date() })\n      .where(eq(apiTokens.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":15356},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, decimal, integer, timestamp, boolean, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\").primaryKey(),\n  productName: text(\"product_name\").notNull(),\n  category: text(\"category\").notNull(),\n  discountedPrice: text(\"discounted_price\").notNull(),\n  actualPrice: text(\"actual_price\").notNull(),\n  discountPercentage: text(\"discount_percentage\"),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }),\n  ratingCount: text(\"rating_count\"),\n  aboutProduct: text(\"about_product\"),\n  imgLink: text(\"img_link\"),\n  productLink: text(\"product_link\"),\n});\n\nexport const cartItems = pgTable(\"cart_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id, { onDelete: \"cascade\" }),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const sessions = pgTable(\"sessions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  token: text(\"token\").notNull().unique(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const apiTokens = pgTable(\"api_tokens\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  tokenHash: text(\"token_hash\").notNull().unique(),\n  lastUsedAt: timestamp(\"last_used_at\"),\n  expiresAt: timestamp(\"expires_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const wishlistItems = pgTable(\"wishlist_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => ({\n  uniqueUserProduct: index(\"unique_user_product_wishlist\").on(table.userId, table.productId),\n}));\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  totalAmount: text(\"total_amount\").notNull(),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"completed\"),\n  invoiceUrl: text(\"invoice_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\").notNull().references(() => orders.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\").notNull().references(() => products.id),\n  productName: text(\"product_name\").notNull(),\n  price: text(\"price\").notNull(),\n  quantity: integer(\"quantity\").notNull().default(1),\n  totalPrice: text(\"total_price\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  email: true,\n  password: true,\n  name: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products);\n\nexport const insertCartItemSchema = createInsertSchema(cartItems).pick({\n  productId: true,\n  quantity: true,\n});\n\nexport const insertWishlistItemSchema = createInsertSchema(wishlistItems).pick({\n  productId: true,\n});\n\nexport const insertApiTokenSchema = createInsertSchema(apiTokens).pick({\n  name: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).pick({\n  totalAmount: true,\n  status: true,\n  invoiceUrl: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).pick({\n  orderId: true,\n  productId: true,\n  productName: true,\n  price: true,\n  quantity: true,\n  totalPrice: true,\n});\n\nexport const signInSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport const signUpSchema = insertUserSchema.extend({\n  password: z.string().min(6),\n  confirmPassword: z.string().min(6),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type Product = typeof products.$inferSelect;\nexport type CartItem = typeof cartItems.$inferSelect;\nexport type Session = typeof sessions.$inferSelect;\nexport type ApiToken = typeof apiTokens.$inferSelect;\nexport type InsertApiToken = z.infer<typeof insertApiTokenSchema>;\nexport type InsertCartItem = z.infer<typeof insertCartItemSchema>;\nexport type WishlistItem = typeof wishlistItems.$inferSelect;\nexport type InsertWishlistItem = z.infer<typeof insertWishlistItemSchema>;\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n","size_bytes":5580},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { ProtectedRoute } from \"@/components/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Login from \"@/pages/login\";\nimport ProductDetail from \"@/pages/product-detail\";\nimport Wishlist from \"@/pages/wishlist\";\nimport Checkout from \"@/pages/checkout\";\nimport Orders from \"@/pages/orders\";\nimport Settings from \"@/pages/settings\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nfunction Router() {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      <Route path=\"/\">\n        {user ? <Redirect to=\"/shop\" /> : <Redirect to=\"/login\" />}\n      </Route>\n      <Route path=\"/login\">\n        {user ? <Redirect to=\"/shop\" /> : <Login />}\n      </Route>\n      <Route path=\"/shop\">\n        <ProtectedRoute>\n          <Home />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/product/:id\">\n        <ProtectedRoute>\n          <ProductDetail />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/wishlist\">\n        <ProtectedRoute>\n          <Wishlist />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/checkout\">\n        <ProtectedRoute>\n          <Checkout />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/orders\">\n        <ProtectedRoute>\n          <Orders />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/settings\">\n        <ProtectedRoute>\n          <Settings />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2460},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&family=Space+Grotesk:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  body {\n    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n    font-weight: 400;\n    letter-spacing: -0.01em;\n    background: linear-gradient(to bottom right, hsl(20, 14%, 4%) 0%, hsl(20, 14%, 6%) 100%);\n    min-height: 100vh;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Space Grotesk', 'Inter', sans-serif;\n    font-weight: 700;\n    letter-spacing: -0.03em;\n    background: linear-gradient(135deg, hsl(45, 25%, 91%) 0%, hsl(45, 25%, 75%) 100%);\n    background-clip: text;\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n  }\n}\n\n:root {\n  --card: #101011;\n  --ring: hsl(221.74, 13.14%, 34.31%);\n  --input: #2b2b2b;\n  --muted: #404040;\n  --accent: hsl(0, 0%, 92.16%);\n  --border: #2b2b2b;\n  --radius: 0.75rem;\n  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  --gradient-accent: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n  --gradient-dark: linear-gradient(135deg, #1a1a1a 0%, #2d2d2d 100%);\n  --shadow: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --popover: hsl(20, 14%, 8%);\n  --primary: #f5f5f5;\n  --sidebar: hsl(45, 25%, 97%);\n  --spacing: 0.25rem;\n  --font-mono: Menlo, monospace;\n  --font-sans: 'Inter', sans-serif;\n  --secondary: #ebebeb;\n  --shadow-lg: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 4px 6px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 2px 4px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 1px 2px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00), 0px 8px 10px -1px hsl(9, 75%, 61% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --background: #090909;\n  --font-serif: 'Inter', sans-serif;\n  --foreground: #ebebeb;\n  --shadow-2xl: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --shadow-2xs: 0px 2px 0px 0px hsl(9, 75%, 61% / 0.00);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --sidebar-accent: hsl(25, 45%, 80%);\n  --sidebar-border: hsl(45, 15%, 80%);\n  --card-foreground: hsl(0, 0%, 100%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --tracking-normal: 0em;\n  --muted-foreground: #ababab;\n  --accent-foreground: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(45, 25%, 91%);\n  --primary-foreground: #0d0d0d;\n  --sidebar-foreground: hsl(20, 14%, 17%);\n  --secondary-foreground: #0d0d0d;\n  --destructive-foreground: #ffffff;\n  --sidebar-accent-foreground: hsl(20, 14%, 17%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n}\n\n.dark {\n  --card: hsl(20, 14%, 8%);\n  --ring: hsl(9, 75%, 61%);\n  --input: hsl(20, 14%, 18%);\n  --muted: hsl(20, 14%, 15%);\n  --accent: hsl(25, 45%, 20%);\n  --border: hsl(20, 14%, 15%);\n  --radius: 0.75rem;\n  --gradient-primary: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  --gradient-secondary: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);\n  --gradient-accent: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);\n  --gradient-dark: linear-gradient(135deg, #0a0a0a 0%, #1a1a1a 100%);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --popover: hsl(20, 14%, 4%);\n  --primary: hsl(9, 75%, 61%);\n  --sidebar: hsl(20, 14%, 8%);\n  --spacing: 0.25rem;\n  --font-mono: Menlo, monospace;\n  --font-sans: Open Sans, sans-serif;\n  --secondary: hsl(30, 15%, 52%);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --background: hsl(20, 14%, 4%);\n  --font-serif: Georgia, serif;\n  --foreground: hsl(45, 25%, 91%);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --sidebar-ring: hsl(9, 75%, 61%);\n  --sidebar-accent: hsl(25, 45%, 20%);\n  --sidebar-border: hsl(20, 14%, 15%);\n  --card-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary: hsl(9, 75%, 61%);\n  --tracking-normal: 0em;\n  --muted-foreground: hsl(45, 15%, 46%);\n  --accent-foreground: hsl(45, 25%, 85%);\n  --popover-foreground: hsl(45, 25%, 91%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(45, 25%, 85%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent-foreground: hsl(45, 25%, 85%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.line-clamp-1 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 1;\n}\n\n.line-clamp-2 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 2;\n}\n\n.line-clamp-3 {\n  overflow: hidden;\n  display: -webkit-box;\n  -webkit-box-orient: vertical;\n  -webkit-line-clamp: 3;\n}\n\n.transition-all-smooth {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.blur-backdrop {\n  backdrop-filter: blur(10px);\n}\n\n/* AI Search Button Styles */\n.ai-search-button {\n  background: linear-gradient(135deg, #8b5cf6 0%, #6366f1 100%);\n  color: white !important;\n  font-weight: 500;\n  position: relative;\n  overflow: hidden;\n  z-index: 1;\n}\n\n.ai-search-button:hover {\n  background: linear-gradient(135deg, #7c3aed 0%, #4f46e5 100%);\n  transform: translateY(-1px);\n  box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);\n}\n\n.ai-search-button::before {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: -100%;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(\n    90deg,\n    transparent,\n    rgba(255, 255, 255, 0.3),\n    transparent\n  );\n  animation: shimmer 3s infinite;\n  z-index: -1;\n}\n\n@keyframes shimmer {\n  0% {\n    left: -100%;\n  }\n  100% {\n    left: 100%;\n  }\n}\n\n@keyframes sparkle {\n  0%, 100% {\n    opacity: 0.9;\n    transform: scale(1);\n  }\n  50% {\n    opacity: 1;\n    transform: scale(1.05);\n  }\n}\n\n.sparkle-icon {\n  animation: sparkle 2s ease-in-out infinite;\n}\n\n/* Professional Animations & Effects */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideIn {\n  from {\n    opacity: 0;\n    transform: translateX(-20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateX(0);\n  }\n}\n\n@keyframes pulse {\n  0%, 100% {\n    transform: scale(1);\n    opacity: 1;\n  }\n  50% {\n    transform: scale(1.05);\n    opacity: 0.9;\n  }\n}\n\n@keyframes float {\n  0%, 100% {\n    transform: translateY(0px);\n  }\n  50% {\n    transform: translateY(-10px);\n  }\n}\n\n@keyframes gradient-shift {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n@keyframes spin-slow {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n.animate-spin-slow {\n  animation: spin-slow 3s linear infinite;\n}\n\n/* Animated Gradient Background */\n.animated-gradient {\n  background: linear-gradient(-45deg, #ee7752, #e73c7e, #23a6d5, #23d5ab);\n  background-size: 400% 400%;\n  animation: gradient-shift 15s ease infinite;\n}\n\n/* Glass Morphism Effect */\n.glass {\n  background: rgba(255, 255, 255, 0.05);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n.glass-dark {\n  background: rgba(0, 0, 0, 0.3);\n  backdrop-filter: blur(10px);\n  -webkit-backdrop-filter: blur(10px);\n  border: 1px solid rgba(255, 255, 255, 0.1);\n}\n\n/* Card Hover Effects */\n.card-hover {\n  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n}\n\n.card-hover:hover {\n  transform: translateY(-4px) scale(1.02);\n  box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);\n}\n\n/* Button Animations */\n.btn-gradient {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  transition: all 0.3s ease;\n  position: relative;\n  overflow: hidden;\n}\n\n.btn-gradient:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 10px 20px rgba(102, 126, 234, 0.4);\n}\n\n.btn-gradient::after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.btn-gradient:hover::after {\n  opacity: 1;\n}\n\n/* Smooth Page Transitions */\n.page-transition {\n  animation: fadeIn 0.5s ease-out;\n}\n\n/* Loading Skeleton Animation */\n@keyframes skeleton-loading {\n  0% {\n    background-position: -200% 0;\n  }\n  100% {\n    background-position: 200% 0;\n  }\n}\n\n.skeleton {\n  background: linear-gradient(\n    90deg,\n    rgba(255, 255, 255, 0.05) 25%,\n    rgba(255, 255, 255, 0.1) 50%,\n    rgba(255, 255, 255, 0.05) 75%\n  );\n  background-size: 200% 100%;\n  animation: skeleton-loading 1.5s infinite;\n}\n\n/* Number Badge Animation */\n@keyframes badge-pop {\n  0% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.3);\n  }\n  100% {\n    transform: scale(1);\n  }\n}\n\n.badge-animate {\n  animation: badge-pop 0.3s ease;\n}\n\n/* Scroll Animations */\n.scroll-fade-in {\n  opacity: 0;\n  transform: translateY(20px);\n  transition: all 0.6s ease;\n}\n\n.scroll-fade-in.visible {\n  opacity: 1;\n  transform: translateY(0);\n}\n\n/* Premium Text Effect */\n.text-gradient {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  background-clip: text;\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n\n/* Glow Effect */\n.glow {\n  box-shadow: 0 0 20px rgba(102, 126, 234, 0.5);\n}\n\n.glow-hover:hover {\n  box-shadow: 0 0 30px rgba(102, 126, 234, 0.7);\n  transition: box-shadow 0.3s ease;\n}\n\n/* Smooth Scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n  height: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: rgba(0, 0, 0, 0.1);\n}\n\n::-webkit-scrollbar-thumb {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: linear-gradient(135deg, #764ba2 0%, #667eea 100%);\n}\n","size_bytes":11313},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/auth-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { ShoppingBag } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { signInSchema, signUpSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype SignInData = z.infer<typeof signInSchema>;\ntype SignUpData = z.infer<typeof signUpSchema>;\n\ninterface AuthModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function AuthModal({ isOpen, onClose }: AuthModalProps) {\n  const [mode, setMode] = useState<\"signin\" | \"signup\">(\"signin\");\n  const { signIn, signUp, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const signInForm = useForm<SignInData>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const signUpForm = useForm<SignUpData>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      name: \"\",\n    },\n  });\n\n  const handleSignIn = async (data: SignInData) => {\n    try {\n      await signIn(data);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been signed in successfully.\",\n      });\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to sign in\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSignUp = async (data: SignUpData) => {\n    try {\n      await signUp(data);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to ShopHub!\",\n      });\n      onClose();\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const resetForms = () => {\n    signInForm.reset();\n    signUpForm.reset();\n  };\n\n  const handleModeToggle = () => {\n    setMode(mode === \"signin\" ? \"signup\" : \"signin\");\n    resetForms();\n  };\n\n  const handleClose = () => {\n    onClose();\n    resetForms();\n    setMode(\"signin\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"sm:max-w-md\">\n        <DialogHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"bg-primary text-primary-foreground rounded-lg p-2\">\n              <ShoppingBag className=\"h-6 w-6\" />\n            </div>\n            <span className=\"text-2xl font-bold\">ShopHub</span>\n          </div>\n          <DialogTitle data-testid=\"auth-modal-title\">\n            {mode === \"signin\" ? \"Sign In\" : \"Create Account\"}\n          </DialogTitle>\n          <DialogDescription>\n            {mode === \"signin\" \n              ? \"Welcome back! Please sign in to your account.\"\n              : \"Join ShopHub to start shopping amazing products.\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {mode === \"signin\" ? (\n            <form onSubmit={signInForm.handleSubmit(handleSignIn)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"signin-email\">Email</Label>\n                <Input\n                  id=\"signin-email\"\n                  type=\"email\"\n                  {...signInForm.register(\"email\")}\n                  data-testid=\"input-signin-email\"\n                />\n                {signInForm.formState.errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signInForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"signin-password\">Password</Label>\n                <Input\n                  id=\"signin-password\"\n                  type=\"password\"\n                  {...signInForm.register(\"password\")}\n                  data-testid=\"input-signin-password\"\n                />\n                {signInForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signInForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-signin-submit\"\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          ) : (\n            <form onSubmit={signUpForm.handleSubmit(handleSignUp)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"signup-name\">Full Name</Label>\n                <Input\n                  id=\"signup-name\"\n                  {...signUpForm.register(\"name\")}\n                  data-testid=\"input-signup-name\"\n                />\n                {signUpForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"signup-email\">Email</Label>\n                <Input\n                  id=\"signup-email\"\n                  type=\"email\"\n                  {...signUpForm.register(\"email\")}\n                  data-testid=\"input-signup-email\"\n                />\n                {signUpForm.formState.errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"signup-password\">Password</Label>\n                <Input\n                  id=\"signup-password\"\n                  type=\"password\"\n                  {...signUpForm.register(\"password\")}\n                  data-testid=\"input-signup-password\"\n                />\n                {signUpForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"signup-confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"signup-confirm-password\"\n                  type=\"password\"\n                  {...signUpForm.register(\"confirmPassword\")}\n                  data-testid=\"input-signup-confirm-password\"\n                />\n                {signUpForm.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-signup-submit\"\n              >\n                {isLoading ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          )}\n          \n          <div className=\"text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              {mode === \"signin\" ? \"Don't have an account?\" : \"Already have an account?\"}\n              <Button\n                variant=\"link\"\n                className=\"ml-1 p-0 h-auto\"\n                onClick={handleModeToggle}\n                data-testid=\"button-toggle-auth-mode\"\n              >\n                {mode === \"signin\" ? \"Sign up\" : \"Sign in\"}\n              </Button>\n            </p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":8103},"client/src/components/cart-sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Minus, Plus, Trash2, ShoppingCart } from \"lucide-react\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useLocation } from \"wouter\";\n\ninterface CartSidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function CartSidebar({ isOpen, onClose }: CartSidebarProps) {\n  const { cartItems, updateQuantity, removeFromCart, clearCart, isLoading } = useCart();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const handleUpdateQuantity = async (productId: string, newQuantity: number) => {\n    try {\n      await updateQuantity(productId, newQuantity);\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveItem = async (productId: string) => {\n    try {\n      await removeFromCart(productId);\n      toast({\n        title: \"Item removed\",\n        description: \"Item has been removed from your cart.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleClearCart = async () => {\n    try {\n      await clearCart();\n      toast({\n        title: \"Cart cleared\",\n        description: \"All items have been removed from your cart.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to clear cart.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const calculateTotal = () => {\n    if (!cartItems) return \"₹0\";\n    \n    const total = cartItems.reduce((sum, item) => {\n      const price = parseFloat(item.product.discountedPrice.replace(/[₹,]/g, ''));\n      return sum + (price * item.quantity);\n    }, 0);\n    \n    return `₹${total.toLocaleString()}`;\n  };\n\n  const parsePrice = (priceStr: string) => {\n    return parseFloat(priceStr.replace(/[₹,]/g, ''));\n  };\n\n  if (!user) {\n    return (\n      <Sheet open={isOpen} onOpenChange={onClose}>\n        <SheetContent className=\"w-80 glass-dark\">\n          <SheetHeader>\n            <SheetTitle data-testid=\"cart-title\" className=\"text-gradient flex items-center gap-2\">\n            <ShoppingCart className=\"h-5 w-5 animate-pulse\" />\n            Shopping Cart\n          </SheetTitle>\n          </SheetHeader>\n          <div className=\"flex-1 flex items-center justify-center py-12\">\n            <div className=\"text-center\">\n              <ShoppingCart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <p className=\"text-muted-foreground mb-4\" data-testid=\"text-signin-required\">\n                Please sign in to view your cart\n              </p>\n            </div>\n          </div>\n        </SheetContent>\n      </Sheet>\n    );\n  }\n\n  return (\n    <Sheet open={isOpen} onOpenChange={onClose}>\n      <SheetContent className=\"w-80 flex flex-col glass-dark\">\n        <SheetHeader>\n          <SheetTitle data-testid=\"cart-title\" className=\"text-gradient flex items-center gap-2\">\n            <ShoppingCart className=\"h-5 w-5 animate-pulse\" />\n            Shopping Cart\n          </SheetTitle>\n        </SheetHeader>\n        \n        <div className=\"flex-1 overflow-y-auto py-4\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"flex items-center space-x-3 p-3 bg-background rounded-lg\">\n                  <Skeleton className=\"w-12 h-12 rounded\" />\n                  <div className=\"flex-1 space-y-2\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-3 w-1/2\" />\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : cartItems?.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center py-12\">\n              <div className=\"text-center\">\n                <ShoppingCart className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\" data-testid=\"text-empty-cart\">\n                  Your cart is empty\n                </p>\n              </div>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {cartItems?.map((item, index) => (\n                <div \n                  key={item.id} \n                  className=\"flex items-center space-x-3 p-3 glass-dark rounded-lg hover:shadow-lg transition-all duration-300\" \n                  data-testid={`cart-item-${item.productId}`}\n                  style={{ animation: `fadeIn 0.3s ease-out ${index * 0.1}s both` }}\n                >\n                  <img\n                    src={item.product.imgLink || \"https://images.unsplash.com/photo-1583863788434-e58a36330cf0?ixlib=rb-4.0.3&auto=format&fit=crop&w=60&h=60\"}\n                    alt={item.product.productName}\n                    className=\"w-12 h-12 object-cover rounded\"\n                    data-testid={`img-cart-item-${item.productId}`}\n                  />\n                  <div className=\"flex-1 min-w-0\">\n                    <h4 className=\"text-sm font-medium line-clamp-2 hover:text-primary transition-colors\" data-testid={`text-item-name-${item.productId}`}>\n                      {item.product.productName}\n                    </h4>\n                    <p className=\"text-xs text-gradient font-bold\" data-testid={`text-item-price-${item.productId}`}>\n                      {item.product.discountedPrice}\n                    </p>\n                  </div>\n                  <div className=\"flex items-center space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"h-6 w-6 p-0 hover:scale-110 transition-transform\"\n                      onClick={() => handleUpdateQuantity(item.productId, item.quantity - 1)}\n                      disabled={item.quantity <= 1}\n                      data-testid={`button-decrease-${item.productId}`}\n                    >\n                      <Minus className=\"h-3 w-3\" />\n                    </Button>\n                    <span className=\"text-sm w-8 text-center font-bold\" data-testid={`text-quantity-${item.productId}`}>\n                      {item.quantity}\n                    </span>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"h-6 w-6 p-0 hover:scale-110 transition-transform\"\n                      onClick={() => handleUpdateQuantity(item.productId, item.quantity + 1)}\n                      data-testid={`button-increase-${item.productId}`}\n                    >\n                      <Plus className=\"h-3 w-3\" />\n                    </Button>\n                  </div>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-destructive hover:text-destructive p-1 hover:scale-110 hover:bg-destructive/20 transition-all\"\n                    onClick={() => handleRemoveItem(item.productId)}\n                    data-testid={`button-remove-${item.productId}`}\n                  >\n                    <Trash2 className=\"h-3 w-3\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </div>\n        \n        {cartItems && cartItems.length > 0 && (\n          <div className=\"border-t border-border pt-4 space-y-4\">\n            <div className=\"flex items-center justify-between text-lg font-semibold glass-dark rounded-lg p-3\">\n              <span>Total:</span>\n              <span data-testid=\"text-cart-total\" className=\"text-gradient text-xl\">{calculateTotal()}</span>\n            </div>\n            <Button \n              className=\"w-full btn-gradient text-white hover:scale-[1.02] transition-transform\" \n              size=\"lg\" \n              data-testid=\"button-checkout\"\n              onClick={() => {\n                onClose();\n                setLocation(\"/checkout\");\n              }}\n            >\n              Proceed to Checkout\n            </Button>\n            <Button \n              variant=\"outline\" \n              className=\"w-full\" \n              onClick={onClose}\n              data-testid=\"button-continue-shopping\"\n            >\n              Continue Shopping\n            </Button>\n            <Separator />\n            <Button \n              variant=\"destructive\" \n              className=\"w-full hover:scale-[1.02] transition-transform\" \n              onClick={handleClearCart}\n              data-testid=\"button-clear-cart\"\n            >\n              Clear Cart\n            </Button>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}\n","size_bytes":9057},"client/src/components/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuSeparator, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { ShoppingBag, Search, ShoppingCart, User, Moon, Sun, LogOut, Heart, UserCircle, Package, Settings, Sparkles } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useTheme } from \"@/components/theme-provider\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface HeaderProps {\n  onSearch: (value: string) => void;\n  onCartToggle: () => void;\n  onAuthToggle: () => void;\n  searchValue?: string;\n}\n\nexport function Header({ onSearch, onCartToggle, onAuthToggle, searchValue = \"\" }: HeaderProps) {\n  const [searchInput, setSearchInput] = useState(searchValue);\n  const { user, signOut } = useAuth();\n  const { cartItems } = useCart();\n  const { theme, toggleTheme } = useTheme();\n  const { toast } = useToast();\n\n  const handleSearch = (e: React.FormEvent) => {\n    e.preventDefault();\n    onSearch(searchInput);\n  };\n\n  const handleSignOut = async () => {\n    try {\n      await signOut();\n      toast({\n        title: \"Signed out\",\n        description: \"You have been signed out successfully.\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to sign out.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const cartItemCount = cartItems?.reduce((total, item) => total + item.quantity, 0) || 0;\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full glass-dark border-b border-border/50 shadow-lg transition-all duration-300\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between\">\n          {/* Logo */}\n          <Link href=\"/shop\">\n            <div className=\"flex items-center space-x-2 cursor-pointer hover:scale-105 transition-transform duration-300\" data-testid=\"logo-link\">\n              <div className=\"btn-gradient text-white rounded-lg p-2 shadow-lg\">\n                <ShoppingBag className=\"h-5 w-5 animate-pulse\" />\n              </div>\n              <span className=\"text-2xl font-bold text-gradient\">ShopHub</span>\n            </div>\n          </Link>\n\n          {/* Search Bar - Hidden on mobile, shown on md+ */}\n          <div className=\"hidden md:flex flex-1 max-w-2xl mx-8\">\n            <div className=\"relative w-full\">\n              <form onSubmit={handleSearch} className=\"flex items-center gap-2\">\n                <div className=\"relative flex-1\">\n                  <Input\n                    id=\"search-input\"\n                    type=\"text\"\n                    placeholder=\"Search products with AI...\"\n                    value={searchInput}\n                    onChange={(e) => setSearchInput(e.target.value)}\n                    className=\"w-full pl-10 pr-4 h-10 glass border-input focus:border-purple-500 transition-all duration-300 focus:scale-[1.02] focus:shadow-lg\"\n                    data-testid=\"input-search-desktop\"\n                  />\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none animate-pulse\" />\n                </div>\n                <Button\n                  type=\"submit\"\n                  size=\"default\"\n                  className=\"ai-search-button h-10 px-4 rounded-md flex items-center justify-center whitespace-nowrap\"\n                  data-testid=\"button-search-desktop\"\n                >\n                  <Sparkles className=\"h-4 w-4 mr-1.5 text-white sparkle-icon\" />\n                  <span className=\"text-white font-medium\">AI Search</span>\n                </Button>\n              </form>\n            </div>\n          </div>\n\n          {/* Navigation */}\n          <nav className=\"flex items-center space-x-4\">\n            {/* Theme Toggle */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={toggleTheme}\n              className=\"hover:scale-110 transition-transform duration-300\"\n              data-testid=\"button-theme-toggle\"\n            >\n              {theme === \"dark\" ? <Sun className=\"h-4 w-4 animate-spin-slow\" /> : <Moon className=\"h-4 w-4 animate-pulse\" />}\n            </Button>\n\n            {/* Cart */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"relative hover:scale-110 transition-transform duration-300\"\n              onClick={onCartToggle}\n              data-testid=\"button-cart\"\n            >\n              <ShoppingCart className=\"h-4 w-4\" />\n              {cartItemCount > 0 && (\n                <span className=\"absolute -top-1 -right-1 bg-gradient-to-r from-red-500 to-pink-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center badge-animate\" data-testid=\"cart-count\">\n                  {cartItemCount}\n                </span>\n              )}\n            </Button>\n\n            {/* User Menu */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-user-menu\">\n                    <User className=\"h-4 w-4 mr-2\" />\n                    <span className=\"hidden md:inline\">{user.name}</span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem data-testid=\"menu-profile\">\n                    <UserCircle className=\"h-4 w-4 mr-2\" />\n                    Profile\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild data-testid=\"menu-wishlist\">\n                    <Link href=\"/wishlist\">\n                      <Heart className=\"h-4 w-4 mr-2\" />\n                      Wishlist\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild data-testid=\"menu-orders\">\n                    <Link href=\"/orders\">\n                      <Package className=\"h-4 w-4 mr-2\" />\n                      Orders\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem asChild data-testid=\"menu-settings\">\n                    <Link href=\"/settings\">\n                      <Settings className=\"h-4 w-4 mr-2\" />\n                      Settings\n                    </Link>\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleSignOut} data-testid=\"menu-logout\">\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Logout\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Button onClick={onAuthToggle} size=\"sm\" className=\"btn-gradient text-white hover:scale-105 transition-transform duration-300\" data-testid=\"button-signin\">\n                Sign In\n              </Button>\n            )}\n          </nav>\n        </div>\n      </div>\n\n      {/* Mobile Search Bar */}\n      <div className=\"md:hidden px-4 pb-4\">\n        <form onSubmit={handleSearch} className=\"flex items-center gap-2\">\n          <div className=\"relative flex-1\">\n            <Input\n              type=\"text\"\n              placeholder=\"Search products with AI...\"\n              value={searchInput}\n              onChange={(e) => setSearchInput(e.target.value)}\n              className=\"w-full pl-10 pr-4 h-10\"\n              data-testid=\"input-search-mobile\"\n            />\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground pointer-events-none\" />\n          </div>\n          <Button\n            type=\"submit\"\n            size=\"default\"\n            className=\"ai-search-button h-10 px-3 rounded-md flex items-center justify-center text-xs whitespace-nowrap\"\n            data-testid=\"button-search-mobile\"\n          >\n            <Sparkles className=\"h-3 w-3 mr-1 text-white sparkle-icon\" />\n            <span className=\"text-white\">AI Search</span>\n          </Button>\n        </form>\n      </div>\n    </header>\n  );\n}\n","size_bytes":8271},"client/src/components/pagination.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { ChevronLeft, ChevronRight } from \"lucide-react\";\n\ninterface PaginationProps {\n  currentPage: number;\n  totalPages: number;\n  total: number;\n  limit: number;\n  onPageChange: (page: number) => void;\n}\n\nexport function Pagination({ currentPage, totalPages, total, limit, onPageChange }: PaginationProps) {\n  const getVisiblePages = () => {\n    const delta = 2;\n    const range = [];\n    const rangeWithDots = [];\n\n    for (let i = Math.max(2, currentPage - delta); i <= Math.min(totalPages - 1, currentPage + delta); i++) {\n      range.push(i);\n    }\n\n    if (currentPage - delta > 2) {\n      rangeWithDots.push(1, '...');\n    } else {\n      rangeWithDots.push(1);\n    }\n\n    rangeWithDots.push(...range);\n\n    if (currentPage + delta < totalPages - 1) {\n      rangeWithDots.push('...', totalPages);\n    } else if (totalPages > 1) {\n      rangeWithDots.push(totalPages);\n    }\n\n    return rangeWithDots;\n  };\n\n  const startItem = (currentPage - 1) * limit + 1;\n  const endItem = Math.min(currentPage * limit, total);\n\n  return (\n    <div className=\"flex flex-col sm:flex-row items-center justify-between gap-4\">\n      <p className=\"text-sm text-muted-foreground\" data-testid=\"pagination-info\">\n        Showing <span className=\"font-medium\">{startItem}</span> to <span className=\"font-medium\">{endItem}</span> of{' '}\n        <span className=\"font-medium\">{total}</span> results\n      </p>\n      \n      <nav className=\"flex items-center space-x-2\">\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage - 1)}\n          disabled={currentPage <= 1}\n          data-testid=\"button-previous-page\"\n        >\n          <ChevronLeft className=\"h-4 w-4 mr-1\" />\n          Previous\n        </Button>\n        \n        <div className=\"flex items-center space-x-1\">\n          {getVisiblePages().map((page, index) => (\n            page === '...' ? (\n              <span key={`ellipsis-${index}`} className=\"px-2 text-muted-foreground\">...</span>\n            ) : (\n              <Button\n                key={`page-${page}`}\n                variant={currentPage === page ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => onPageChange(page as number)}\n                data-testid={`button-page-${page}`}\n              >\n                {page}\n              </Button>\n            )\n          ))}\n        </div>\n        \n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => onPageChange(currentPage + 1)}\n          disabled={currentPage >= totalPages}\n          data-testid=\"button-next-page\"\n        >\n          Next\n          <ChevronRight className=\"h-4 w-4 ml-1\" />\n        </Button>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":2782},"client/src/components/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Heart, Plus, ShoppingCart } from \"lucide-react\";\nimport { Product } from \"@shared/schema\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProductCardProps {\n  product: Product;\n  viewMode?: \"grid\" | \"list\";\n}\n\nexport function ProductCard({ product, viewMode = \"grid\" }: ProductCardProps) {\n  const [imageError, setImageError] = useState(false);\n  const { user } = useAuth();\n  const { addToCart, isLoading } = useCart();\n  const { toggleWishlist, isInWishlist, isToggling } = useWishlist();\n  const { toast } = useToast();\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-3 w-3 fill-yellow-400/50 text-yellow-400\" />);\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-3 w-3 text-muted-foreground\" />);\n    }\n\n    return stars;\n  };\n\n  const handleAddToCart = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!user) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to add items to your cart.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await addToCart({ productId: product.id, quantity: 1 });\n      toast({\n        title: \"Added to cart\",\n        description: `${product.productName} has been added to your cart.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWishlistToggle = async (e: React.MouseEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    if (!user) {\n      toast({\n        title: \"Sign in required\",\n        description: \"Please sign in to add items to your wishlist.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      await toggleWishlist(product.id);\n      const isNowInWishlist = !isInWishlist(product.id);\n      toast({\n        title: isNowInWishlist ? \"Added to wishlist\" : \"Removed from wishlist\",\n        description: isNowInWishlist \n          ? `${product.productName} has been added to your wishlist.`\n          : `${product.productName} has been removed from your wishlist.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wishlist.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getImageSrc = () => {\n    if (imageError || !product.imgLink) {\n      return \"https://images.unsplash.com/photo-1583863788434-e58a36330cf0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\";\n    }\n    // Handle both external URLs and local generated images\n    if (product.imgLink.startsWith('http://') || product.imgLink.startsWith('https://')) {\n      return product.imgLink;\n    }\n    // For local generated images\n    return product.imgLink;\n  };\n\n  if (viewMode === \"list\") {\n    return (\n      <Card className=\"group glass-dark card-hover transition-all duration-300 hover:shadow-xl\" data-testid={`card-product-${product.id}`}>\n        <Link href={`/product/${product.id}`}>\n          <CardContent className=\"p-4\">\n            <div className=\"flex gap-4\">\n              <div className=\"relative w-24 h-24 flex-shrink-0\">\n                <img\n                  src={getImageSrc()}\n                  alt={product.productName}\n                  className=\"w-full h-full object-cover rounded-lg\"\n                  onError={() => setImageError(true)}\n                  data-testid={`img-product-${product.id}`}\n                />\n                {product.discountPercentage && (\n                  <Badge variant=\"destructive\" className=\"absolute top-1 left-1 text-xs\">\n                    {product.discountPercentage} OFF\n                  </Badge>\n                )}\n              </div>\n              \n              <div className=\"flex-1 min-w-0\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex items-center space-x-1\">\n                    {product.rating && (\n                      <>\n                        <div className=\"flex\" data-testid={`rating-${product.id}`}>\n                          {renderStars(parseFloat(product.rating.toString()))}\n                        </div>\n                        <span className=\"text-xs text-muted-foreground\">\n                          ({product.ratingCount})\n                        </span>\n                      </>\n                    )}\n                  </div>\n                  <Button \n                    variant=\"ghost\" \n                    size=\"sm\" \n                    onClick={handleWishlistToggle}\n                    disabled={isToggling}\n                    data-testid={`button-wishlist-${product.id}`}\n                  >\n                    <Heart className={`h-4 w-4 ${isInWishlist(product.id) ? 'fill-red-500 text-red-500' : ''}`} />\n                  </Button>\n                </div>\n                \n                <h3 className=\"font-medium text-sm mb-1 line-clamp-2 group-hover:text-primary transition-colors\" data-testid={`text-name-${product.id}`}>\n                  {product.productName}\n                </h3>\n                \n                <p className=\"text-xs text-muted-foreground mb-2 line-clamp-1\" data-testid={`text-category-${product.id}`}>\n                  {product.category}\n                </p>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-lg font-bold text-primary\" data-testid={`text-price-${product.id}`}>\n                      {product.discountedPrice}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground line-through\">\n                      {product.actualPrice}\n                    </span>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={handleAddToCart}\n                    disabled={isLoading}\n                    data-testid={`button-add-cart-${product.id}`}\n                  >\n                    <ShoppingCart className=\"h-4 w-4 mr-1\" />\n                    Add\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Link>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"group glass-dark card-hover transition-all duration-300 overflow-hidden\" data-testid={`card-product-${product.id}`}>\n      <Link href={`/product/${product.id}`}>\n        <div className=\"relative overflow-hidden\">\n          <img\n            src={getImageSrc()}\n            alt={product.productName}\n            className=\"w-full h-48 object-cover transition-transform duration-500 group-hover:scale-110\"\n            onError={() => setImageError(true)}\n            data-testid={`img-product-${product.id}`}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n          {product.discountPercentage && (\n            <Badge variant=\"destructive\" className=\"absolute top-2 left-2 z-10 badge-animate\">\n              {product.discountPercentage} OFF\n            </Badge>\n          )}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-all duration-300 transform group-hover:scale-110 glass z-10\"\n            onClick={handleWishlistToggle}\n            disabled={isToggling}\n            data-testid={`button-wishlist-${product.id}`}\n          >\n            <Heart className={`h-4 w-4 ${isInWishlist(product.id) ? 'fill-red-500 text-red-500 animate-pulse' : ''}`} />\n          </Button>\n        </div>\n        \n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center space-x-1\">\n              {product.rating && (\n                <>\n                  <div className=\"flex\" data-testid={`rating-${product.id}`}>\n                    {renderStars(parseFloat(product.rating.toString()))}\n                  </div>\n                  <span className=\"text-xs text-muted-foreground\">\n                    ({product.ratingCount})\n                  </span>\n                </>\n              )}\n            </div>\n          </div>\n          \n          <h3 className=\"font-medium text-sm mb-2 line-clamp-2 group-hover:text-primary transition-colors duration-300\" data-testid={`text-name-${product.id}`}>\n            {product.productName}\n          </h3>\n          \n          <p className=\"text-xs text-muted-foreground mb-3 line-clamp-2\" data-testid={`text-category-${product.id}`}>\n            {product.category}\n          </p>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-lg font-bold text-gradient\" data-testid={`text-price-${product.id}`}>\n                {product.discountedPrice}\n              </span>\n              <span className=\"text-sm text-muted-foreground line-through\">\n                {product.actualPrice}\n              </span>\n            </div>\n            <Button\n              size=\"sm\"\n              onClick={handleAddToCart}\n              disabled={isLoading}\n              className=\"btn-gradient text-white hover:scale-105 transform transition-all duration-300\"\n              data-testid={`button-add-cart-${product.id}`}\n            >\n              <Plus className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </CardContent>\n      </Link>\n    </Card>\n  );\n}\n","size_bytes":10385},"client/src/components/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n}\n\nexport function ProtectedRoute({ children }: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <Redirect to=\"/login\" />;\n  }\n\n  return <>{children}</>;\n}","size_bytes":703},"client/src/components/sidebar-filters.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Sheet, SheetContent, SheetHeader, SheetTitle } from \"@/components/ui/sheet\";\nimport { Star, X } from \"lucide-react\";\nimport React from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\n\ninterface SidebarFiltersProps {\n  onCategoryChange: (category: string) => void;\n  onPriceChange: (min: string, max: string) => void;\n  onRatingChange: (rating: string) => void;\n  onClearFilters: () => void;\n  selectedCategory: string;\n  selectedRating: string;\n  priceRange: { min: string; max: string };\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function SidebarFilters({ \n  onCategoryChange, \n  onPriceChange,\n  onRatingChange,\n  onClearFilters, \n  selectedCategory,\n  selectedRating,\n  priceRange,\n  isOpen,\n  onClose \n}: SidebarFiltersProps) {\n  const [priceMin, setPriceMin] = useState(priceRange?.min || \"\");\n  const [priceMax, setPriceMax] = useState(priceRange?.max || \"\");\n  \n  const { data: categories } = useQuery({\n    queryKey: ['/api/categories'],\n  });\n\n  const renderStars = (count: number) => {\n    const stars = [];\n    for (let i = 0; i < count; i++) {\n      stars.push(<Star key={i} className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />);\n    }\n    for (let i = count; i < 5; i++) {\n      stars.push(<Star key={i} className=\"h-3 w-3 text-muted-foreground\" />);\n    }\n    return stars;\n  };\n\n  const handleCategoryChange = (category: string, checked: boolean) => {\n    if (checked) {\n      onCategoryChange(category);\n    } else if (selectedCategory === category) {\n      onCategoryChange(\"\");\n    }\n  };\n\n  const applyPriceFilter = () => {\n    onPriceChange(priceMin, priceMax);\n  };\n\n  const handleRatingChange = (value: string) => {\n    onRatingChange(value);\n  };\n\n  // Update local state when props change\n  React.useEffect(() => {\n    setPriceMin(priceRange.min);\n    setPriceMax(priceRange.max);\n  }, [priceRange]);\n\n  const FilterContent = () => (\n    <div className=\"space-y-6\">\n      {/* Categories */}\n      <div>\n        <h3 className=\"text-sm font-medium mb-3 text-muted-foreground\">Categories</h3>\n        <div className=\"space-y-2 max-h-64 overflow-y-auto\">\n          {categories?.map((category: string) => (\n            <div key={category} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={`category-${category}`}\n                checked={selectedCategory === category}\n                onCheckedChange={(checked) => handleCategoryChange(category, checked as boolean)}\n                data-testid={`checkbox-category-${category}`}\n              />\n              <Label htmlFor={`category-${category}`} className=\"text-sm cursor-pointer truncate\" title={category}>\n                {category.replace(/&/g, ' & ').replace(/([A-Z])/g, ' $1').trim().replace(/\\s+/g, ' ')}\n              </Label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      {/* Price Range */}\n      <div>\n        <h3 className=\"text-sm font-medium mb-3 text-muted-foreground\">Price Range</h3>\n        <div className=\"space-y-3\">\n          <div className=\"flex space-x-2\">\n            <Input\n              type=\"number\"\n              placeholder=\"Min\"\n              value={priceMin}\n              onChange={(e) => setPriceMin(e.target.value)}\n              className=\"text-sm\"\n              data-testid=\"input-price-min\"\n            />\n            <Input\n              type=\"number\"\n              placeholder=\"Max\"\n              value={priceMax}\n              onChange={(e) => setPriceMax(e.target.value)}\n              className=\"text-sm\"\n              data-testid=\"input-price-max\"\n            />\n          </div>\n          <Button \n            onClick={applyPriceFilter} \n            className=\"w-full\" \n            size=\"sm\"\n            data-testid=\"button-apply-price\"\n          >\n            Apply\n          </Button>\n        </div>\n      </div>\n\n      {/* Rating */}\n      <div>\n        <h3 className=\"text-sm font-medium mb-3 text-muted-foreground\">Rating</h3>\n        <RadioGroup \n          className=\"space-y-2\" \n          value={selectedRating} \n          onValueChange={handleRatingChange}\n        >\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"5\" id=\"rating-5\" />\n            <Label htmlFor=\"rating-5\" className=\"flex items-center cursor-pointer\">\n              <div className=\"flex mr-2\">\n                {renderStars(5)}\n              </div>\n              <span className=\"text-sm\">5 stars</span>\n            </Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"4\" id=\"rating-4\" />\n            <Label htmlFor=\"rating-4\" className=\"flex items-center cursor-pointer\">\n              <div className=\"flex mr-2\">\n                {renderStars(4)}\n              </div>\n              <span className=\"text-sm\">4+ stars</span>\n            </Label>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <RadioGroupItem value=\"3\" id=\"rating-3\" />\n            <Label htmlFor=\"rating-3\" className=\"flex items-center cursor-pointer\">\n              <div className=\"flex mr-2\">\n                {renderStars(3)}\n              </div>\n              <span className=\"text-sm\">3+ stars</span>\n            </Label>\n          </div>\n        </RadioGroup>\n      </div>\n\n      {/* Clear Filters */}\n      <Button \n        variant=\"outline\" \n        onClick={onClearFilters} \n        className=\"w-full\"\n        data-testid=\"button-clear-filters\"\n      >\n        Clear All Filters\n      </Button>\n    </div>\n  );\n\n  return (\n    <>\n      {/* Desktop Sidebar */}\n      <aside className=\"hidden lg:block w-64 bg-card border-r border-border\">\n        <div className=\"p-6\">\n          <h2 className=\"text-lg font-semibold mb-4\">Filters</h2>\n          <FilterContent />\n        </div>\n      </aside>\n\n      {/* Mobile Sheet */}\n      <Sheet open={isOpen} onOpenChange={onClose}>\n        <SheetContent side=\"left\" className=\"w-80\">\n          <SheetHeader>\n            <SheetTitle>Filters</SheetTitle>\n          </SheetHeader>\n          <div className=\"mt-6\">\n            <FilterContent />\n          </div>\n        </SheetContent>\n      </Sheet>\n    </>\n  );\n}\n","size_bytes":6454},"client/src/components/theme-provider.tsx":{"content":"import React, { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\";\n\ntype ThemeProviderContext = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContext | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    if (typeof window !== \"undefined\") {\n      return (localStorage.getItem(\"theme\") as Theme) || \"light\";\n    }\n    return \"light\";\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(theme === \"light\" ? \"dark\" : \"light\");\n  };\n\n  const value = {\n    theme,\n    setTheme,\n    toggleTheme,\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n\n  return context;\n};\n","size_bytes":1275},"client/src/hooks/use-auth.ts":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { signInSchema, signUpSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\ntype SignInData = z.infer<typeof signInSchema>;\ntype SignUpData = z.infer<typeof signUpSchema>;\n\ninterface User {\n  id: string;\n  email: string;\n  name: string;\n}\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n}\n\nexport function useAuth() {\n  const queryClient = useQueryClient();\n\n  const { data: user, isLoading: isLoadingUser } = useQuery<User | null>({\n    queryKey: ['/api/auth/me'],\n    queryFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return null;\n      \n      try {\n        const response = await fetch('/api/auth/me', {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n        \n        if (!response.ok) {\n          localStorage.removeItem('auth_token');\n          return null;\n        }\n        \n        const data = await response.json();\n        return data.user;\n      } catch (error) {\n        localStorage.removeItem('auth_token');\n        return null;\n      }\n    },\n  });\n\n  const signInMutation = useMutation({\n    mutationFn: async (data: SignInData): Promise<AuthResponse> => {\n      const response = await apiRequest('POST', '/api/auth/signin', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('auth_token', data.token);\n      queryClient.setQueryData(['/api/auth/me'], data.user);\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const signUpMutation = useMutation({\n    mutationFn: async (data: SignUpData): Promise<AuthResponse> => {\n      const response = await apiRequest('POST', '/api/auth/signup', data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      localStorage.setItem('auth_token', data.token);\n      queryClient.setQueryData(['/api/auth/me'], data.user);\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const signOutMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      if (token) {\n        await apiRequest('POST', '/api/auth/logout', {}, {\n          headers: {\n            Authorization: `Bearer ${token}`,\n          },\n        });\n      }\n    },\n    onSettled: () => {\n      localStorage.removeItem('auth_token');\n      queryClient.setQueryData(['/api/auth/me'], null);\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  return {\n    user,\n    isLoading: isLoadingUser || signInMutation.isPending || signUpMutation.isPending || signOutMutation.isPending,\n    signIn: signInMutation.mutateAsync,\n    signUp: signUpMutation.mutateAsync,\n    signOut: signOutMutation.mutateAsync,\n  };\n}\n","size_bytes":2869},"client/src/hooks/use-cart.ts":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CartItem, Product, InsertCartItem } from \"@shared/schema\";\n\ntype CartItemWithProduct = CartItem & { product: Product };\n\nexport function useCart() {\n  const queryClient = useQueryClient();\n\n  const { data: cartItems, isLoading } = useQuery<CartItemWithProduct[]>({\n    queryKey: ['/api/cart'],\n    queryFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      if (!token) return [];\n      \n      const response = await fetch('/api/cart', {\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) return [];\n        throw new Error('Failed to fetch cart');\n      }\n      \n      return response.json();\n    },\n  });\n\n  const addToCartMutation = useMutation({\n    mutationFn: async (item: InsertCartItem) => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/cart', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify(item),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to add to cart');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/cart/${productId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          Authorization: `Bearer ${token}`,\n        },\n        body: JSON.stringify({ quantity }),\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to update quantity');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const removeFromCartMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/cart/${productId}`, {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to remove from cart');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  const clearCartMutation = useMutation({\n    mutationFn: async () => {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch('/api/cart', {\n        method: 'DELETE',\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n      \n      if (!response.ok) {\n        throw new Error('Failed to clear cart');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/cart'] });\n    },\n  });\n\n  return {\n    cartItems,\n    isLoading: isLoading || addToCartMutation.isPending || updateQuantityMutation.isPending || removeFromCartMutation.isPending || clearCartMutation.isPending,\n    addToCart: addToCartMutation.mutateAsync,\n    updateQuantity: (productId: string, quantity: number) => updateQuantityMutation.mutateAsync({ productId, quantity }),\n    removeFromCart: removeFromCartMutation.mutateAsync,\n    clearCart: clearCartMutation.mutateAsync,\n  };\n}\n","size_bytes":3751},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-products.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Product } from \"@shared/schema\";\nimport { getAuthToken } from \"@/lib/auth\";\n\ninterface ProductsResponse {\n  products: Product[];\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n}\n\n// Use backend proxy to avoid CORS issues\nconst SEMANTIC_SEARCH_API = \"/api/semantic-search\";\n\nexport function useProducts(\n  page: number, \n  limit: number, \n  search?: string, \n  category?: string, \n  sortBy?: string,\n  priceMin?: string,\n  priceMax?: string,\n  rating?: string\n) {\n  return useQuery<ProductsResponse>({\n    queryKey: ['/api/products', { page, limit, search, category, sortBy, priceMin, priceMax, rating }],\n    queryFn: async () => {\n      // Use semantic search if search query is provided\n      if (search && search.trim()) {\n        try {\n          console.log('Performing semantic search for:', search);\n          \n          // First, get product IDs from semantic search via backend proxy\n          const token = getAuthToken();\n          const headers: Record<string, string> = {\n            \"Content-Type\": \"application/json\",\n          };\n          if (token) {\n            headers[\"Authorization\"] = `Bearer ${token}`;\n          }\n          \n          const semanticResponse = await fetch(SEMANTIC_SEARCH_API, {\n            method: \"POST\",\n            headers,\n            body: JSON.stringify({\n              query: search,\n              n_results: 100, // Get more results to apply filters\n            }),\n          });\n\n          console.log('Semantic search response status:', semanticResponse.status);\n          \n          if (!semanticResponse.ok) {\n            const errorText = await semanticResponse.text();\n            console.error('Semantic search error response:', errorText);\n            throw new Error(\"Semantic search failed\");\n          }\n\n          const semanticData = await semanticResponse.json();\n          console.log('Semantic search data:', semanticData);\n          \n          const semanticProducts = semanticData.products || [];\n          console.log('Found', semanticProducts.length, 'products from semantic search');\n          \n          // Extract product IDs from semantic search results\n          const productIds = semanticProducts.map((p: any) => p.id);\n          console.log('Product IDs to fetch:', productIds);\n          \n          if (productIds.length === 0) {\n            console.log('No products found in semantic search');\n            return {\n              products: [],\n              pagination: {\n                page,\n                limit,\n                total: 0,\n                totalPages: 0,\n              },\n            };\n          }\n          \n          // Fetch actual products from our database using the IDs\n          const params = new URLSearchParams();\n          params.append('ids', productIds.join(','));\n          if (category) params.append('category', category);\n          if (sortBy) params.append('sortBy', sortBy);\n          if (priceMin) params.append('priceMin', priceMin);\n          if (priceMax) params.append('priceMax', priceMax);\n          if (rating) params.append('rating', rating);\n          \n          console.log('Fetching products with params:', params.toString());\n          const productsHeaders: Record<string, string> = {};\n          if (token) {\n            productsHeaders[\"Authorization\"] = `Bearer ${token}`;\n          }\n          const productsResponse = await fetch(`/api/products/by-ids?${params}`, {\n            headers: productsHeaders\n          });\n          \n          console.log('Products fetch response status:', productsResponse.status);\n          if (!productsResponse.ok) {\n            const errorText = await productsResponse.text();\n            console.error('Failed to fetch products:', errorText);\n            throw new Error('Failed to fetch products by IDs');\n          }\n          \n          const productsData = await productsResponse.json();\n          console.log('Fetched products data:', productsData);\n          \n          let products = productsData.products || productsData || [];\n          console.log('Products from database:', products.length);\n          \n          // Maintain the order from semantic search results\n          const productMap = new Map(products.map((p: Product) => [p.id, p]));\n          const orderedProducts = productIds\n            .map((id: string) => productMap.get(id))\n            .filter((p: Product | undefined): p is Product => p !== undefined);\n          \n          console.log('Ordered products count:', orderedProducts.length);\n          \n          // Apply additional filters if provided\n          let filteredProducts = orderedProducts;\n          \n          if (category) {\n            filteredProducts = filteredProducts.filter((p: Product) => p.category === category);\n          }\n          \n          if (priceMin || priceMax) {\n            filteredProducts = filteredProducts.filter((p: Product) => {\n              const price = parseInt(p.discountedPrice?.replace(/[^0-9]/g, '') || '0');\n              const min = priceMin ? parseInt(priceMin) : 0;\n              const max = priceMax ? parseInt(priceMax) : Infinity;\n              return price >= min && price <= max;\n            });\n          }\n          \n          if (rating) {\n            filteredProducts = filteredProducts.filter((p: Product) => {\n              const productRating = parseFloat(p.rating || '0');\n              return productRating >= parseFloat(rating);\n            });\n          }\n          \n          // Apply sorting if specified (overrides semantic search order)\n          if (sortBy) {\n            filteredProducts.sort((a: Product, b: Product) => {\n              switch (sortBy) {\n                case 'price_asc':\n                  return parseInt(a.discountedPrice?.replace(/[^0-9]/g, '') || '0') - \n                         parseInt(b.discountedPrice?.replace(/[^0-9]/g, '') || '0');\n                case 'price_desc':\n                  return parseInt(b.discountedPrice?.replace(/[^0-9]/g, '') || '0') - \n                         parseInt(a.discountedPrice?.replace(/[^0-9]/g, '') || '0');\n                case 'rating':\n                  return parseFloat(b.rating || '0') - parseFloat(a.rating || '0');\n                default:\n                  return 0;\n              }\n            });\n          }\n          \n          // Paginate results\n          const startIdx = (page - 1) * limit;\n          const paginatedProducts = filteredProducts.slice(startIdx, startIdx + limit);\n          \n          return {\n            products: paginatedProducts,\n            pagination: {\n              page,\n              limit,\n              total: filteredProducts.length,\n              totalPages: Math.ceil(filteredProducts.length / limit),\n            },\n          };\n        } catch (error) {\n          console.error('Semantic search failed, falling back to regular search:', error);\n          // Fall back to regular search if semantic search fails\n        }\n      }\n      \n      // Regular product browsing without semantic search\n      const params = new URLSearchParams({\n        page: page.toString(),\n        limit: limit.toString(),\n      });\n      \n      if (search) params.append('search', search);\n      if (category) params.append('category', category);\n      if (sortBy) params.append('sortBy', sortBy);\n      if (priceMin) params.append('priceMin', priceMin);\n      if (priceMax) params.append('priceMax', priceMax);\n      if (rating) params.append('rating', rating);\n      \n      const token = getAuthToken();\n      const headers: Record<string, string> = {};\n      if (token) {\n        headers[\"Authorization\"] = `Bearer ${token}`;\n      }\n      \n      const response = await fetch(`/api/products?${params}`, {\n        headers\n      });\n      if (!response.ok) {\n        throw new Error('Failed to fetch products');\n      }\n      return response.json();\n    },\n  });\n}\n","size_bytes":7939},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"export function getAuthToken(): string | null {\n  if (typeof window === 'undefined') return null;\n  return localStorage.getItem('auth_token');\n}\n\nexport function setAuthToken(token: string): void {\n  if (typeof window === 'undefined') return;\n  localStorage.setItem('auth_token', token);\n}\n\nexport function removeAuthToken(): void {\n  if (typeof window === 'undefined') return;\n  localStorage.removeItem('auth_token');\n}\n\nexport function isAuthenticated(): boolean {\n  return getAuthToken() !== null;\n}\n","size_bytes":503},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\nimport { getAuthToken } from \"./auth\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = getAuthToken();\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n  \n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = getAuthToken();\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n    \n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1776},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/header\";\nimport { SidebarFilters } from \"@/components/sidebar-filters\";\nimport { ProductCard } from \"@/components/product-card\";\nimport { Pagination } from \"@/components/pagination\";\nimport { CartSidebar } from \"@/components/cart-sidebar\";\nimport { AuthModal } from \"@/components/auth-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Filter, Grid, List } from \"lucide-react\";\nimport { useProducts } from \"@/hooks/use-products\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport default function Home() {\n  const [page, setPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"relevance\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showMobileFilters, setShowMobileFilters] = useState(false);\n  const [showCart, setShowCart] = useState(false);\n  const [showAuth, setShowAuth] = useState(false);\n  const [priceRange, setPriceRange] = useState({ min: \"\", max: \"\" });\n  const [rating, setRating] = useState(\"\");\n\n  const { data: productsData, isLoading } = useProducts(page, 20, search, category, sortBy, priceRange.min, priceRange.max, rating);\n  const { user } = useAuth();\n\n  const handleSearch = (value: string) => {\n    setSearch(value);\n    setPage(1);\n  };\n\n  const handleCategoryFilter = (value: string) => {\n    setCategory(value);\n    setPage(1);\n  };\n\n  const handleSortChange = (value: string) => {\n    setSortBy(value);\n    setPage(1);\n  };\n\n  const handlePriceFilter = (min: string, max: string) => {\n    setPriceRange({ min, max });\n    setPage(1);\n  };\n\n  const handleRatingFilter = (value: string) => {\n    setRating(value);\n    setPage(1);\n  };\n\n  const clearFilters = () => {\n    setSearch(\"\");\n    setCategory(\"\");\n    setSortBy(\"relevance\");\n    setPriceRange({ min: \"\", max: \"\" });\n    setRating(\"\");\n    setPage(1);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground page-transition\">\n      <Header \n        onSearch={handleSearch}\n        onCartToggle={() => setShowCart(true)}\n        onAuthToggle={() => setShowAuth(true)}\n        searchValue={search}\n      />\n      \n      {/* Hero Section */}\n      {!search && !category && page === 1 && (\n        <section className=\"relative overflow-hidden px-4 py-12 mb-8\">\n          <div className=\"animated-gradient absolute inset-0 opacity-10\"></div>\n          <div className=\"relative max-w-7xl mx-auto text-center\">\n            <h1 className=\"text-5xl md:text-6xl font-bold mb-6 animate-fadeIn\" \n                style={{animation: \"fadeIn 0.8s ease-out\"}}>\n              Discover Amazing Products\n            </h1>\n            <p className=\"text-xl text-muted-foreground mb-8 max-w-2xl mx-auto\" \n               style={{animation: \"fadeIn 0.8s ease-out 0.2s both\"}}>\n              Shop the latest trends with AI-powered search and personalized recommendations\n            </p>\n            <div className=\"flex gap-4 justify-center\" \n                 style={{animation: \"fadeIn 0.8s ease-out 0.4s both\"}}>\n              <Button \n                className=\"btn-gradient text-white px-8 py-6 text-lg\"\n                onClick={() => document.getElementById('search-input')?.focus()}\n              >\n                Start Shopping\n              </Button>\n              <Button \n                variant=\"outline\" \n                className=\"px-8 py-6 text-lg glass-dark hover:scale-105 transition-transform\"\n                onClick={() => setShowMobileFilters(true)}\n              >\n                Browse Categories\n              </Button>\n            </div>\n          </div>\n        </section>\n      )}\n      \n      <div className=\"flex min-h-screen\">\n        <SidebarFilters\n          onCategoryChange={handleCategoryFilter}\n          onPriceChange={handlePriceFilter}\n          onRatingChange={handleRatingFilter}\n          onClearFilters={clearFilters}\n          selectedCategory={category}\n          selectedRating={rating}\n          priceRange={priceRange}\n          isOpen={showMobileFilters}\n          onClose={() => setShowMobileFilters(false)}\n        />\n        \n        <main className=\"flex-1 p-4 lg:p-6 page-transition\">\n          {/* Toolbar */}\n          <div className=\"flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-6\">\n            <div className=\"page-transition\">\n              <h1 className=\"text-3xl font-bold mb-2\" data-testid=\"page-title\">\n                {search ? `Search Results for \"${search}\"` : \n                 category ? category : \n                 'All Products'}\n              </h1>\n              <p className=\"text-muted-foreground\" data-testid=\"products-count\">\n                {productsData ? \n                  `Showing ${((page - 1) * 20) + 1}-${Math.min(page * 20, productsData.pagination.total)} of ${productsData.pagination.total} products` :\n                  'Loading...'\n                }\n              </p>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              {/* Mobile Filter Toggle */}\n              <Button\n                variant=\"outline\"\n                className=\"lg:hidden\"\n                onClick={() => setShowMobileFilters(true)}\n                data-testid=\"button-mobile-filters\"\n              >\n                <Filter className=\"h-4 w-4 mr-2\" />\n                Filters\n              </Button>\n              \n              {/* Sort Dropdown */}\n              <Select value={sortBy} onValueChange={handleSortChange}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"relevance\">Sort by Relevance</SelectItem>\n                  <SelectItem value=\"price-low\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price-high\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"rating-high\">Rating: High to Low</SelectItem>\n                  <SelectItem value=\"rating-low\">Rating: Low to High</SelectItem>\n                  <SelectItem value=\"newest\">Newest Arrivals</SelectItem>\n                </SelectContent>\n              </Select>\n              \n              {/* View Toggle */}\n              <div className=\"flex rounded-lg border border-border overflow-hidden\">\n                <Button\n                  variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"grid\")}\n                  data-testid=\"button-grid-view\"\n                >\n                  <Grid className=\"h-4 w-4\" />\n                </Button>\n                <Button\n                  variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                  size=\"sm\"\n                  onClick={() => setViewMode(\"list\")}\n                  data-testid=\"button-list-view\"\n                >\n                  <List className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Products Grid */}\n          {isLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8\">\n              {Array.from({ length: 20 }).map((_, i) => (\n                <div key={i} className=\"space-y-4 glass-dark rounded-lg p-4 skeleton\">\n                  <Skeleton className=\"h-48 w-full rounded-lg\" />\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                  <Skeleton className=\"h-6 w-1/4\" />\n                </div>\n              ))}\n            </div>\n          ) : productsData?.products.length === 0 ? (\n            <div className=\"text-center py-12\" data-testid=\"empty-state\">\n              <p className=\"text-muted-foreground text-lg\">No products found</p>\n              <Button onClick={clearFilters} className=\"mt-4\" data-testid=\"button-clear-filters\">\n                Clear Filters\n              </Button>\n            </div>\n          ) : (\n            <div className={`grid gap-6 mb-8 ${\n              viewMode === \"grid\" \n                ? \"grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\" \n                : \"grid-cols-1\"\n            }`}>\n              {productsData?.products.map((product, index) => (\n                <div\n                  key={product.id}\n                  style={{\n                    animation: `fadeIn 0.5s ease-out ${index * 0.05}s both`\n                  }}\n                >\n                  <ProductCard\n                    product={product}\n                    viewMode={viewMode}\n                  />\n                </div>\n              ))}\n            </div>\n          )}\n\n          {/* Pagination */}\n          {productsData && productsData.pagination.totalPages > 1 && (\n            <Pagination\n              currentPage={page}\n              totalPages={productsData.pagination.totalPages}\n              total={productsData.pagination.total}\n              limit={20}\n              onPageChange={setPage}\n            />\n          )}\n        </main>\n      </div>\n\n      <CartSidebar \n        isOpen={showCart} \n        onClose={() => setShowCart(false)} \n      />\n      \n      <AuthModal \n        isOpen={showAuth} \n        onClose={() => setShowAuth(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":9565},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { ShoppingBag } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { signInSchema, signUpSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype SignInData = z.infer<typeof signInSchema>;\ntype SignUpData = z.infer<typeof signUpSchema>;\n\nexport default function Login() {\n  const [mode, setMode] = useState<\"signin\" | \"signup\">(\"signin\");\n  const [, setLocation] = useLocation();\n  const { signIn, signUp, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const signInForm = useForm<SignInData>({\n    resolver: zodResolver(signInSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const signUpForm = useForm<SignUpData>({\n    resolver: zodResolver(signUpSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      name: \"\",\n    },\n  });\n\n  const handleSignIn = async (data: SignInData) => {\n    try {\n      await signIn(data);\n      toast({\n        title: \"Welcome back!\",\n        description: \"You have been signed in successfully.\",\n      });\n      setLocation(\"/shop\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to sign in\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleSignUp = async (data: SignUpData) => {\n    try {\n      await signUp(data);\n      toast({\n        title: \"Account created!\",\n        description: \"Welcome to ShopHub!\",\n      });\n      setLocation(\"/shop\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center space-x-2 mb-4\">\n            <div className=\"bg-primary text-primary-foreground rounded-lg p-2\">\n              <ShoppingBag className=\"h-6 w-6\" />\n            </div>\n            <span className=\"text-2xl font-bold\">ShopHub</span>\n          </div>\n          <CardTitle data-testid=\"auth-title\">\n            {mode === \"signin\" ? \"Sign In\" : \"Create Account\"}\n          </CardTitle>\n          <CardDescription>\n            {mode === \"signin\" \n              ? \"Welcome back! Please sign in to your account.\"\n              : \"Join ShopHub to start shopping amazing products.\"\n            }\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {mode === \"signin\" ? (\n            <form onSubmit={signInForm.handleSubmit(handleSignIn)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"email\">Email</Label>\n                <Input\n                  id=\"email\"\n                  type=\"email\"\n                  {...signInForm.register(\"email\")}\n                  data-testid=\"input-email\"\n                />\n                {signInForm.formState.errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signInForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"password\">Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...signInForm.register(\"password\")}\n                  data-testid=\"input-password\"\n                />\n                {signInForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signInForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-signin\"\n              >\n                {isLoading ? \"Signing in...\" : \"Sign In\"}\n              </Button>\n            </form>\n          ) : (\n            <form onSubmit={signUpForm.handleSubmit(handleSignUp)} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"name\">Full Name</Label>\n                <Input\n                  id=\"name\"\n                  {...signUpForm.register(\"name\")}\n                  data-testid=\"input-name\"\n                />\n                {signUpForm.formState.errors.name && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.name.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"signup-email\">Email</Label>\n                <Input\n                  id=\"signup-email\"\n                  type=\"email\"\n                  {...signUpForm.register(\"email\")}\n                  data-testid=\"input-signup-email\"\n                />\n                {signUpForm.formState.errors.email && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.email.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"signup-password\">Password</Label>\n                <Input\n                  id=\"signup-password\"\n                  type=\"password\"\n                  {...signUpForm.register(\"password\")}\n                  data-testid=\"input-signup-password\"\n                />\n                {signUpForm.formState.errors.password && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n              <div>\n                <Label htmlFor=\"confirm-password\">Confirm Password</Label>\n                <Input\n                  id=\"confirm-password\"\n                  type=\"password\"\n                  {...signUpForm.register(\"confirmPassword\")}\n                  data-testid=\"input-confirm-password\"\n                />\n                {signUpForm.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-destructive mt-1\">\n                    {signUpForm.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n              <Button \n                type=\"submit\" \n                className=\"w-full\" \n                disabled={isLoading}\n                data-testid=\"button-signup\"\n              >\n                {isLoading ? \"Creating account...\" : \"Create Account\"}\n              </Button>\n            </form>\n          )}\n          \n          <div className=\"mt-6 text-center\">\n            <p className=\"text-sm text-muted-foreground\">\n              {mode === \"signin\" ? \"Don't have an account?\" : \"Already have an account?\"}\n              <Button\n                variant=\"link\"\n                className=\"ml-1 p-0 h-auto\"\n                onClick={() => setMode(mode === \"signin\" ? \"signup\" : \"signin\")}\n                data-testid=\"button-toggle-mode\"\n              >\n                {mode === \"signin\" ? \"Sign up\" : \"Sign in\"}\n              </Button>\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":7723},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/product-detail.tsx":{"content":"import { useParams, Link } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Heart, ShoppingCart, Star } from \"lucide-react\";\nimport { Header } from \"@/components/header\";\nimport { CartSidebar } from \"@/components/cart-sidebar\";\nimport { AuthModal } from \"@/components/auth-modal\";\nimport { useState } from \"react\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function ProductDetail() {\n  const { id } = useParams();\n  const [showCart, setShowCart] = useState(false);\n  const [showAuth, setShowAuth] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const { addToCart, isLoading: cartLoading } = useCart();\n  const { toggleWishlist, isInWishlist, isToggling } = useWishlist();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const { data: product, isLoading, error } = useQuery({\n    queryKey: ['/api/products', id],\n  });\n\n  const handleAddToCart = async () => {\n    if (!user) {\n      setShowAuth(true);\n      return;\n    }\n\n    if (!product) return;\n\n    try {\n      await addToCart({ productId: product.id, quantity: 1 });\n      toast({\n        title: \"Added to cart\",\n        description: `${product.productName} has been added to your cart.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleWishlistToggle = async () => {\n    if (!user) {\n      setShowAuth(true);\n      return;\n    }\n\n    if (!product) return;\n\n    try {\n      await toggleWishlist(product.id);\n      const isNowInWishlist = !isInWishlist(product.id);\n      toast({\n        title: isNowInWishlist ? \"Added to wishlist\" : \"Removed from wishlist\",\n        description: isNowInWishlist \n          ? `${product.productName} has been added to your wishlist.`\n          : `${product.productName} has been removed from your wishlist.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update wishlist.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n\n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-4 w-4 fill-yellow-400 text-yellow-400\" />);\n    }\n\n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-4 w-4 fill-yellow-400/50 text-yellow-400\" />);\n    }\n\n    const emptyStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < emptyStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-4 w-4 text-muted-foreground\" />);\n    }\n\n    return stars;\n  };\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header \n          onSearch={() => {}}\n          onCartToggle={() => setShowCart(true)}\n          onAuthToggle={() => setShowAuth(true)}\n        />\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-destructive mb-4\" data-testid=\"error-title\">\n              Product Not Found\n            </h1>\n            <p className=\"text-muted-foreground mb-4\">\n              The product you're looking for doesn't exist.\n            </p>\n            <Link href=\"/shop\">\n              <Button data-testid=\"link-back-home\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Products\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSearch={() => {}}\n        onCartToggle={() => setShowCart(true)}\n        onAuthToggle={() => setShowAuth(true)}\n      />\n      \n      <div className=\"container mx-auto px-4 py-8\">\n        <Link href=\"/shop\">\n          <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Products\n          </Button>\n        </Link>\n\n        {isLoading ? (\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            <Skeleton className=\"h-96 w-full\" />\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-6 w-1/2\" />\n              <Skeleton className=\"h-12 w-1/3\" />\n              <Skeleton className=\"h-24 w-full\" />\n              <Skeleton className=\"h-10 w-1/2\" />\n            </div>\n          </div>\n        ) : product ? (\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Product Image */}\n            <div className=\"space-y-4\">\n              <Card>\n                <CardContent className=\"p-6\">\n                  <img\n                    src={(imageError || !product.imgLink) ? \"https://images.unsplash.com/photo-1583863788434-e58a36330cf0?ixlib=rb-4.0.3&auto=format&fit=crop&w=500&h=400\" : product.imgLink}\n                    alt={product.productName}\n                    className=\"w-full h-96 object-cover rounded-lg\"\n                    onError={() => setImageError(true)}\n                    data-testid=\"img-product\"\n                  />\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Product Info */}\n            <div className=\"space-y-6\">\n              {/* Rating */}\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"flex\" data-testid=\"product-rating\">\n                  {product.rating && renderStars(parseFloat(product.rating.toString()))}\n                </div>\n                <span className=\"text-muted-foreground\" data-testid=\"text-rating-count\">\n                  ({product.ratingCount} reviews)\n                </span>\n              </div>\n\n              {/* Title */}\n              <h1 className=\"text-3xl font-bold\" data-testid=\"text-product-name\">\n                {product.productName}\n              </h1>\n\n              {/* Category */}\n              <Badge variant=\"secondary\" data-testid=\"badge-category\">\n                {product.category}\n              </Badge>\n\n              {/* Price */}\n              <div className=\"flex items-center space-x-4\">\n                <span className=\"text-4xl font-bold text-primary\" data-testid=\"text-discounted-price\">\n                  {product.discountedPrice}\n                </span>\n                <span className=\"text-xl text-muted-foreground line-through\" data-testid=\"text-actual-price\">\n                  {product.actualPrice}\n                </span>\n                {product.discountPercentage && (\n                  <Badge variant=\"destructive\" data-testid=\"badge-discount\">\n                    {product.discountPercentage} OFF\n                  </Badge>\n                )}\n              </div>\n\n              {/* Description */}\n              {product.aboutProduct && (\n                <div>\n                  <h3 className=\"font-semibold mb-2\">About this product</h3>\n                  <p className=\"text-muted-foreground text-sm leading-relaxed\" data-testid=\"text-description\">\n                    {product.aboutProduct}\n                  </p>\n                </div>\n              )}\n\n              {/* Actions */}\n              <div className=\"flex space-x-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"flex-1\"\n                  onClick={handleAddToCart}\n                  disabled={cartLoading}\n                  data-testid=\"button-add-to-cart\"\n                >\n                  <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                  {cartLoading ? \"Adding...\" : \"Add to Cart\"}\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  onClick={handleWishlistToggle}\n                  disabled={isToggling}\n                  data-testid=\"button-wishlist\"\n                >\n                  <Heart className={`h-5 w-5 ${product && isInWishlist(product.id) ? 'fill-red-500 text-red-500' : ''}`} />\n                </Button>\n              </div>\n\n              {/* Product Link */}\n              {product.productLink && (\n                <a\n                  href={product.productLink}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"text-primary hover:underline text-sm\"\n                  data-testid=\"link-product-external\"\n                >\n                  View on Amazon →\n                </a>\n              )}\n            </div>\n          </div>\n        ) : null}\n      </div>\n\n      <CartSidebar \n        isOpen={showCart} \n        onClose={() => setShowCart(false)} \n      />\n      \n      <AuthModal \n        isOpen={showAuth} \n        onClose={() => setShowAuth(false)} \n      />\n    </div>\n  );\n}\n","size_bytes":9186},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-wishlist.ts":{"content":"import { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertWishlistItemSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport function useWishlist() {\n  const queryClient = useQueryClient();\n\n  const { data: wishlistItems = [], isLoading, error } = useQuery({\n    queryKey: [\"/api/wishlist\"],\n    retry: false,\n  });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: async (item: z.infer<typeof insertWishlistItemSchema>) => {\n      const response = await apiRequest(\"POST\", \"/api/wishlist\", item);\n      return await response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n    },\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      return await apiRequest(\"DELETE\", `/api/wishlist/${productId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n    },\n  });\n\n  const checkWishlistStatusQuery = (productId: string) => useQuery({\n    queryKey: [`/api/wishlist/check/${productId}`],\n    retry: false,\n  });\n\n  const toggleWishlist = async (productId: string) => {\n    const isInWishlist = wishlistItems.some((item: any) => item.productId === productId);\n    \n    if (isInWishlist) {\n      await removeFromWishlistMutation.mutateAsync(productId);\n    } else {\n      await addToWishlistMutation.mutateAsync({ productId });\n    }\n  };\n\n  const isInWishlist = (productId: string) => {\n    return wishlistItems.some((item: any) => item.productId === productId);\n  };\n\n  return {\n    wishlistItems,\n    isLoading,\n    error,\n    addToWishlist: addToWishlistMutation.mutate,\n    removeFromWishlist: removeFromWishlistMutation.mutate,\n    toggleWishlist,\n    isInWishlist,\n    isToggling: addToWishlistMutation.isPending || removeFromWishlistMutation.isPending,\n  };\n}","size_bytes":1936},"client/src/pages/checkout.tsx":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useLocation } from \"wouter\";\nimport { ShoppingCart, Package, ArrowLeft, CreditCard, ShoppingBag } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Separator } from \"@/components/ui/separator\";\nimport jsPDF from \"jspdf\";\nimport type { CartItem, Product } from \"@shared/schema\";\n\nexport default function Checkout() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n\n  const { data: cartItems = [], isLoading } = useQuery<(CartItem & { product: Product })[]>({\n    queryKey: [\"/api/cart\"]\n  });\n\n  const checkoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await apiRequest(\"POST\", \"/api/checkout\");\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      if (!data || !data.order) {\n        toast({\n          title: \"Order Placed\",\n          description: \"Your order has been placed successfully!\",\n        });\n        \n        // Clear cart and redirect\n        await queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n        setTimeout(() => {\n          setLocation(\"/orders\");\n        }, 2000);\n        return;\n      }\n      \n      // Generate PDF invoice\n      const pdf = new jsPDF();\n      \n      // Header\n      pdf.setFontSize(20);\n      pdf.text(\"Invoice\", 105, 20, { align: \"center\" });\n      \n      pdf.setFontSize(12);\n      pdf.text(`Order ID: ${data.order.id}`, 20, 40);\n      pdf.text(`Date: ${new Date(data.order.createdAt).toLocaleDateString()}`, 20, 50);\n      pdf.text(`Status: ${data.order.status}`, 20, 60);\n      \n      // Items table header\n      pdf.setFontSize(10);\n      pdf.text(\"Product\", 20, 80);\n      pdf.text(\"Quantity\", 120, 80);\n      pdf.text(\"Price\", 150, 80);\n      pdf.text(\"Total\", 180, 80);\n      \n      // Items\n      let yPosition = 90;\n      if (data.order.items && data.order.items.length > 0) {\n        data.order.items.forEach((item: any) => {\n          const price = parseFloat(item.price.replace(/[^\\d.]/g, ''));\n          const total = parseFloat(item.totalPrice.replace(/[^\\d.]/g, ''));\n          \n          // Truncate long product names\n          const productName = item.productName.length > 50 \n            ? item.productName.substring(0, 50) + \"...\" \n            : item.productName;\n          \n          pdf.text(productName, 20, yPosition);\n          pdf.text(item.quantity.toString(), 120, yPosition);\n          pdf.text(`₹${price.toFixed(2)}`, 150, yPosition);\n          pdf.text(`₹${total.toFixed(2)}`, 180, yPosition);\n          \n          yPosition += 10;\n          \n          // Add new page if needed\n          if (yPosition > 270) {\n            pdf.addPage();\n            yPosition = 20;\n          }\n        });\n      } else if (cartItems.length > 0) {\n        // Fallback to cart items if order items not available\n        cartItems.forEach((item) => {\n          const price = parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, ''));\n          const total = price * item.quantity;\n          \n          // Truncate long product names\n          const productName = item.product.productName.length > 50 \n            ? item.product.productName.substring(0, 50) + \"...\" \n            : item.product.productName;\n          \n          pdf.text(productName, 20, yPosition);\n          pdf.text(item.quantity.toString(), 120, yPosition);\n          pdf.text(`₹${price.toFixed(2)}`, 150, yPosition);\n          pdf.text(`₹${total.toFixed(2)}`, 180, yPosition);\n          \n          yPosition += 10;\n          \n          // Add new page if needed\n          if (yPosition > 270) {\n            pdf.addPage();\n            yPosition = 20;\n          }\n        });\n      }\n      \n      // Total\n      pdf.setFontSize(12);\n      pdf.text(`Total Amount: ₹${data.order.totalAmount}`, 180, yPosition + 20, { align: \"right\" });\n      \n      // Save PDF\n      pdf.save(`invoice_${data.order.id}.pdf`);\n      \n      // Clear cart and show success message\n      await queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      \n      toast({\n        title: \"Order Placed Successfully!\",\n        description: \"Your invoice has been downloaded. Thank you for your purchase!\"\n      });\n      \n      // Redirect to orders page\n      setTimeout(() => {\n        setLocation(\"/orders\");\n      }, 2000);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Checkout Failed\",\n        description: error.message || \"Failed to process checkout\",\n        variant: \"destructive\"\n      });\n    }\n  });\n\n  const calculateTotal = () => {\n    return cartItems.reduce((total, item) => {\n      const price = parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, ''));\n      return total + (price * item.quantity);\n    }, 0).toFixed(2);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Loading checkout...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-full p-6 w-32 h-32 mx-auto mb-6 flex items-center justify-center\">\n            <ShoppingCart className=\"w-16 h-16 text-gray-400\" />\n          </div>\n          <h2 className=\"text-3xl font-bold mb-4 text-gray-900 dark:text-white\">Your cart is empty</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto\">\n            Add some items to your cart to proceed with checkout\n          </p>\n          <Link href=\"/shop\">\n            <Button size=\"lg\" data-testid=\"button-continue-shopping\">\n              <ShoppingBag className=\"w-5 h-5 mr-2\" />\n              Continue Shopping\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <Link href=\"/shop\">\n            <Button variant=\"ghost\" className=\"mb-6\" data-testid=\"button-back-to-cart\">\n              <ArrowLeft className=\"w-4 h-4 mr-2\" />\n              Back to Shopping\n            </Button>\n          </Link>\n          \n          <h1 className=\"text-4xl font-bold mb-8 text-gray-900 dark:text-gray-100\">Checkout</h1>\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            {/* Order Items */}\n            <div className=\"lg:col-span-2 space-y-6\">\n              <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                    <ShoppingBag className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n                    Order Summary\n                  </CardTitle>\n                  <CardDescription className=\"text-gray-600 dark:text-gray-300\">Review your items before completing the purchase</CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  {cartItems.map((item) => {\n                    const price = parseFloat(item.product.discountedPrice.replace(/[^\\d.]/g, ''));\n                    const total = price * item.quantity;\n                    \n                    return (\n                      <div key={item.id} data-testid={`checkout-item-${item.productId}`}>\n                        <div className=\"flex gap-4\">\n                          <img\n                            src={item.product.imgLink || \"https://images.unsplash.com/photo-1583863788434-e58a36330cf0?ixlib=rb-4.0.3&auto=format&fit=crop&w=100&h=100\"}\n                            alt={item.product.productName}\n                            className=\"w-20 h-20 object-cover rounded-lg\"\n                          />\n                          <div className=\"flex-1\">\n                            <h3 className=\"font-semibold text-base text-gray-900 dark:text-gray-100 line-clamp-2\" data-testid={`text-product-name-${item.productId}`}>\n                              {item.product.productName}\n                            </h3>\n                            <div className=\"flex items-center gap-2 mt-2\">\n                              <span className=\"text-sm text-gray-600 dark:text-gray-300\">Qty:</span>\n                              <span className=\"font-semibold text-sm text-gray-900 dark:text-gray-100\" data-testid={`text-quantity-${item.productId}`}>{item.quantity}</span>\n                              <span className=\"text-sm text-gray-600 dark:text-gray-300\">×</span>\n                              <span className=\"font-semibold text-sm text-gray-900 dark:text-gray-100\">₹{price.toFixed(2)}</span>\n                            </div>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-lg font-bold text-gray-900 dark:text-gray-100\" data-testid={`text-item-total-${item.productId}`}>\n                              ₹{total.toFixed(2)}\n                            </p>\n                          </div>\n                        </div>\n                        {item !== cartItems[cartItems.length - 1] && <Separator className=\"mt-4\" />}\n                      </div>\n                    );\n                  })}\n                </CardContent>\n              </Card>\n            </div>\n            \n            {/* Payment Summary */}\n            <div className=\"space-y-6\">\n              <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-lg font-semibold text-gray-900 dark:text-gray-100\">\n                    <CreditCard className=\"h-5 w-5 text-gray-700 dark:text-gray-300\" />\n                    Payment Summary\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600 dark:text-gray-300\">Subtotal</span>\n                      <span className=\"font-semibold text-gray-900 dark:text-gray-100\">₹{calculateTotal()}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600 dark:text-gray-300\">Shipping</span>\n                      <span className=\"font-semibold text-green-600 dark:text-green-400\">FREE</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600 dark:text-gray-300\">Tax</span>\n                      <span className=\"font-semibold text-gray-900 dark:text-gray-100\">₹0.00</span>\n                    </div>\n                    <Separator />\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-base font-semibold text-gray-700 dark:text-gray-200\">Total</span>\n                      <span className=\"text-2xl font-bold text-gray-900 dark:text-gray-100\" data-testid=\"text-total-amount\">₹{calculateTotal()}</span>\n                    </div>\n                  </div>\n                  \n                  <div className=\"p-4 bg-blue-50 dark:bg-blue-900/30 rounded-lg border border-blue-200 dark:border-blue-700\">\n                    <p className=\"text-sm text-blue-700 dark:text-blue-200 font-medium\">\n                      <strong>Demo Mode:</strong> This will simulate a successful payment and generate an invoice PDF.\n                    </p>\n                  </div>\n                  \n                  <Button \n                    className=\"w-full\" \n                    size=\"lg\"\n                    onClick={() => checkoutMutation.mutate()}\n                    disabled={checkoutMutation.isPending}\n                    data-testid=\"button-complete-order\"\n                  >\n                    {checkoutMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Processing Payment...\n                      </>\n                    ) : (\n                      <>\n                        <CreditCard className=\"w-4 h-4 mr-2\" />\n                        Complete Order\n                      </>\n                    )}\n                  </Button>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\">\n                <CardContent className=\"pt-6\">\n                  <div className=\"flex items-start gap-3\">\n                    <Package className=\"h-5 w-5 text-green-600 dark:text-green-400 mt-0.5\" />\n                    <div>\n                      <p className=\"font-semibold text-sm text-gray-900 dark:text-gray-100\">Free Delivery</p>\n                      <p className=\"text-xs text-gray-600 dark:text-gray-300 mt-1\">\n                        Estimated delivery in 3-5 business days\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":13942},"client/src/pages/orders.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Package, Download, ShoppingCart } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Link } from \"wouter\";\nimport jsPDF from \"jspdf\";\nimport type { Order, OrderItem, Product } from \"@shared/schema\";\n\nexport default function Orders() {\n  const { data: orders = [], isLoading } = useQuery<(Order & { items: (OrderItem & { product: Product })[] })[]>({\n    queryKey: [\"/api/orders\"]\n  });\n\n  const downloadInvoice = (order: Order & { items: (OrderItem & { product: Product })[] }) => {\n    const pdf = new jsPDF();\n    \n    // Header\n    pdf.setFontSize(20);\n    pdf.text(\"Invoice\", 105, 20, { align: \"center\" });\n    \n    pdf.setFontSize(12);\n    pdf.text(`Order ID: ${order.id}`, 20, 40);\n    pdf.text(`Date: ${order.createdAt ? new Date(order.createdAt).toLocaleDateString() : 'N/A'}`, 20, 50);\n    pdf.text(`Status: ${order.status}`, 20, 60);\n    \n    // Items table header\n    pdf.setFontSize(10);\n    pdf.text(\"Product\", 20, 80);\n    pdf.text(\"Quantity\", 120, 80);\n    pdf.text(\"Price\", 150, 80);\n    pdf.text(\"Total\", 180, 80);\n    \n    // Items\n    let yPosition = 90;\n    order.items.forEach((item) => {\n      const price = parseFloat(item.price.replace(/[^\\d.]/g, ''));\n      const total = parseFloat(item.totalPrice.replace(/[^\\d.]/g, ''));\n      \n      // Truncate long product names\n      const productName = item.productName.length > 50 \n        ? item.productName.substring(0, 50) + \"...\" \n        : item.productName;\n      \n      pdf.text(productName, 20, yPosition);\n      pdf.text(item.quantity.toString(), 120, yPosition);\n      pdf.text(`₹${price.toFixed(2)}`, 150, yPosition);\n      pdf.text(`₹${total.toFixed(2)}`, 180, yPosition);\n      \n      yPosition += 10;\n      \n      // Add new page if needed\n      if (yPosition > 270) {\n        pdf.addPage();\n        yPosition = 20;\n      }\n    });\n    \n    // Total\n    pdf.setFontSize(12);\n    pdf.text(`Total Amount: ₹${order.totalAmount}`, 180, yPosition + 20, { align: \"right\" });\n    \n    // Save PDF\n    pdf.save(`invoice_${order.id}.pdf`);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-gray-600 dark:text-gray-400\">Loading orders...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (orders.length === 0) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"bg-white dark:bg-gray-800 rounded-full p-6 w-32 h-32 mx-auto mb-6 flex items-center justify-center\">\n            <Package className=\"w-16 h-16 text-gray-400\" />\n          </div>\n          <h2 className=\"text-3xl font-bold mb-4 text-gray-900 dark:text-gray-100\">No Orders Yet</h2>\n          <p className=\"text-gray-600 dark:text-gray-400 mb-8 max-w-md mx-auto\">\n            You haven't placed any orders yet. Start shopping to see your orders here!\n          </p>\n          <Link href=\"/\">\n            <Button size=\"lg\" data-testid=\"button-start-shopping\">\n              <ShoppingCart className=\"w-5 h-5 mr-2\" />\n              Start Shopping\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 dark:bg-gray-900\">\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <h1 className=\"text-4xl font-bold mb-8 text-gray-900 dark:text-gray-100\">My Orders</h1>\n        \n        <div className=\"space-y-6\">\n          {orders.map((order) => (\n            <Card key={order.id} className=\"bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700\" data-testid={`order-${order.id}`}>\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <div>\n                    <h2 className=\"text-lg font-semibold text-gray-900 dark:text-gray-100 mb-2\">Order #{order.id.slice(0, 8)}</h2>\n                    <p className=\"text-sm text-gray-600 dark:text-gray-300\" data-testid={`text-order-date-${order.id}`}>\n                    Placed on {order.createdAt ? new Date(order.createdAt).toLocaleDateString('en-US', { \n                      year: 'numeric', \n                      month: 'long', \n                      day: 'numeric' \n                    }) : 'N/A'}\n                    </p>\n                    <p className=\"text-sm mt-1\">\n                      <span className=\"inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-300\">\n                      {order.status}\n                      </span>\n                    </p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xl font-bold text-gray-900 dark:text-gray-100 mb-2\" data-testid={`text-order-total-${order.id}`}>₹{order.totalAmount}</p>\n                    <Button \n                      size=\"sm\" \n                      variant=\"outline\"\n                      className=\"border-gray-300 dark:border-gray-600\"\n                      onClick={() => downloadInvoice(order)}\n                      data-testid={`button-download-invoice-${order.id}`}\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download Invoice\n                    </Button>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent>\n                <Separator className=\"mb-4\" />\n                <h3 className=\"font-semibold text-gray-900 dark:text-gray-100 mb-3\">Order Items</h3>\n                <div className=\"space-y-3\">\n                  {order.items.map((item) => (\n                    <div key={item.id} className=\"flex justify-between items-start py-2\" data-testid={`order-item-${item.id}`}>\n                      <div className=\"flex-1\">\n                        <p className=\"font-medium text-gray-900 dark:text-gray-100 line-clamp-2\" data-testid={`text-item-name-${item.id}`}>{item.productName}</p>\n                        <p className=\"text-sm text-gray-600 dark:text-gray-300 mt-1\">\n                          Qty: {item.quantity} × ₹{parseFloat(item.price.replace(/[^\\d.]/g, '')).toFixed(2)}\n                        </p>\n                      </div>\n                      <p className=\"font-semibold text-gray-900 dark:text-gray-100\" data-testid={`text-item-total-${item.id}`}>\n                        ₹{parseFloat(item.totalPrice.replace(/[^\\d.]/g, '')).toFixed(2)}\n                      </p>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n    </div>\n  );\n}","size_bytes":7087},"client/src/pages/wishlist.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowLeft, Heart, ShoppingCart, Trash2 } from \"lucide-react\";\nimport { Header } from \"@/components/header\";\nimport { CartSidebar } from \"@/components/cart-sidebar\";\nimport { AuthModal } from \"@/components/auth-modal\";\nimport { useState } from \"react\";\nimport { useCart } from \"@/hooks/use-cart\";\nimport { useWishlist } from \"@/hooks/use-wishlist\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Wishlist() {\n  const [showCart, setShowCart] = useState(false);\n  const [showAuth, setShowAuth] = useState(false);\n  const { wishlistItems, removeFromWishlist, isLoading } = useWishlist();\n  const { addToCart, isLoading: cartLoading } = useCart();\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const handleAddToCart = async (productId: string, productName: string) => {\n    if (!user) {\n      setShowAuth(true);\n      return;\n    }\n\n    try {\n      await addToCart({ productId, quantity: 1 });\n      toast({\n        title: \"Added to cart\",\n        description: `${productName} has been added to your cart.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add product to cart.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleRemoveFromWishlist = async (productId: string, productName: string) => {\n    try {\n      await removeFromWishlist(productId);\n      toast({\n        title: \"Removed from wishlist\",\n        description: `${productName} has been removed from your wishlist.`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove from wishlist.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        onSearch={() => {}}\n        onCartToggle={() => setShowCart(true)} \n        onAuthToggle={() => setShowAuth(true)}\n      />\n\n      <div className=\"container mx-auto px-4 py-8\">\n        {/* Back button */}\n        <Link href=\"/shop\">\n          <Button variant=\"ghost\" className=\"mb-6\">\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to shopping\n          </Button>\n        </Link>\n\n        {/* Page title */}\n        <div className=\"mb-8\">\n          <h1 className=\"text-3xl font-bold mb-2\">My Wishlist</h1>\n          <p className=\"text-muted-foreground\">\n            {wishlistItems?.length || 0} {wishlistItems?.length === 1 ? 'item' : 'items'} saved\n          </p>\n        </div>\n\n        {/* Loading state */}\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-48 w-full mb-4\" />\n                  <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                  <Skeleton className=\"h-4 w-1/2 mb-4\" />\n                  <Skeleton className=\"h-10 w-full\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : wishlistItems && wishlistItems.length > 0 ? (\n          // Wishlist items\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {wishlistItems.map((item: any) => (\n              <Card key={item.id} className=\"overflow-hidden\">\n                <Link href={`/product/${item.product.id}`}>\n                  <div className=\"relative\">\n                    <img\n                      src={item.product.imgLink || \"https://images.unsplash.com/photo-1583863788434-e58a36330cf0?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=300\"}\n                      alt={item.product.productName}\n                      className=\"w-full h-48 object-cover\"\n                      data-testid={`img-wishlist-${item.product.id}`}\n                    />\n                    {item.product.discountPercentage && (\n                      <div className=\"absolute top-2 left-2 bg-destructive text-destructive-foreground text-xs px-2 py-1 rounded\">\n                        {item.product.discountPercentage} OFF\n                      </div>\n                    )}\n                  </div>\n                </Link>\n                \n                <CardContent className=\"p-4\">\n                  <Link href={`/product/${item.product.id}`}>\n                    <h3 className=\"font-medium text-sm mb-2 line-clamp-2 hover:text-primary transition-colors\" data-testid={`text-name-${item.product.id}`}>\n                      {item.product.productName}\n                    </h3>\n                  </Link>\n                  \n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <span className=\"text-lg font-bold text-primary\" data-testid={`text-price-${item.product.id}`}>\n                      {item.product.discountedPrice}\n                    </span>\n                    <span className=\"text-sm text-muted-foreground line-through\">\n                      {item.product.actualPrice}\n                    </span>\n                  </div>\n                  \n                  <div className=\"flex space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => handleAddToCart(item.product.id, item.product.productName)}\n                      disabled={cartLoading}\n                      data-testid={`button-add-cart-${item.product.id}`}\n                    >\n                      <ShoppingCart className=\"h-4 w-4 mr-1\" />\n                      Add to Cart\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleRemoveFromWishlist(item.product.id, item.product.productName)}\n                      data-testid={`button-remove-wishlist-${item.product.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          // Empty state\n          <Card className=\"max-w-md mx-auto\">\n            <CardContent className=\"p-12 text-center\">\n              <Heart className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground\" />\n              <h2 className=\"text-xl font-semibold mb-2\">Your wishlist is empty</h2>\n              <p className=\"text-muted-foreground mb-6\">\n                Start adding products you love to your wishlist!\n              </p>\n              <Link href=\"/shop\">\n                <Button>\n                  <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                  Start Shopping\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n\n      <CartSidebar \n        isOpen={showCart} \n        onClose={() => setShowCart(false)} \n      />\n      \n      <AuthModal \n        isOpen={showAuth} \n        onClose={() => setShowAuth(false)} \n      />\n    </div>\n  );\n}","size_bytes":7230},"client/src/hooks/use-semantic-search.ts":{"content":"import { useMutation } from \"@tanstack/react-query\";\nimport { Product } from \"@shared/schema\";\n\ninterface SemanticSearchRequest {\n  query: string;\n  n_results?: number;\n}\n\ninterface SemanticSearchResponse {\n  products: Product[];\n}\n\nconst SEMANTIC_SEARCH_API = \"https://product-search.replit.app/search\";\nconst API_TOKEN = \"*ULXrUUDkkjRheg3cjpQAcBbzGgffZBn!32ssr8JRW9VERcVmweQqGnYi!Y8jcPnG\";\n\nexport function useSemanticSearch() {\n  return useMutation<SemanticSearchResponse, Error, SemanticSearchRequest>({\n    mutationFn: async ({ query, n_results = 20 }) => {\n      const response = await fetch(SEMANTIC_SEARCH_API, {\n        method: \"POST\",\n        headers: {\n          \"accept\": \"application/json\",\n          \"Authorization\": `Bearer ${API_TOKEN}`,\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          query,\n          n_results,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to perform semantic search\");\n      }\n\n      const data = await response.json();\n      \n      // Map the response to match our Product interface if needed\n      // Assuming the API returns products in a compatible format\n      return {\n        products: data.results || data.products || data,\n      };\n    },\n  });\n}","size_bytes":1277},"client/src/pages/settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { Key, Copy, Trash2, Plus, Calendar, Clock, Settings as SettingsIcon } from \"lucide-react\";\nimport { format } from \"date-fns\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface ApiToken {\n  id: string;\n  name: string;\n  createdAt: string;\n  expiresAt: string | null;\n  lastUsedAt: string | null;\n}\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const [tokens, setTokens] = useState<ApiToken[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [showCreateDialog, setShowCreateDialog] = useState(false);\n  const [showTokenDialog, setShowTokenDialog] = useState(false);\n  const [newTokenName, setNewTokenName] = useState(\"\");\n  const [newToken, setNewToken] = useState(\"\");\n  const [creating, setCreating] = useState(false);\n  const [deleting, setDeleting] = useState<string | null>(null);\n\n  useEffect(() => {\n    fetchTokens();\n  }, []);\n\n  const fetchTokens = async () => {\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please log in again to manage API tokens\",\n          variant: \"destructive\"\n        });\n        setLoading(false);\n        return;\n      }\n      \n      const response = await fetch('/api/tokens', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      \n      if (response.status === 401) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please log in again to manage API tokens\",\n          variant: \"destructive\"\n        });\n        // Redirect to login\n        window.location.href = '/login';\n        return;\n      }\n      \n      if (response.ok) {\n        const data = await response.json();\n        setTokens(data);\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to fetch API tokens\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleCreateToken = async () => {\n    if (!newTokenName.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a token name\",\n        variant: \"destructive\"\n      });\n      return;\n    }\n\n    setCreating(true);\n    try {\n      const token = localStorage.getItem('auth_token');\n      if (!token) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please log in again to create API tokens\",\n          variant: \"destructive\"\n        });\n        setShowCreateDialog(false);\n        window.location.href = '/login';\n        return;\n      }\n      \n      const response = await fetch('/api/tokens', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ name: newTokenName })\n      });\n\n      if (response.status === 401) {\n        toast({\n          title: \"Session Expired\",\n          description: \"Please log in again to create API tokens\",\n          variant: \"destructive\"\n        });\n        setShowCreateDialog(false);\n        window.location.href = '/login';\n        return;\n      }\n\n      if (response.ok) {\n        const data = await response.json();\n        setNewToken(data.token);\n        setShowCreateDialog(false);\n        setShowTokenDialog(true);\n        setNewTokenName(\"\");\n        await fetchTokens();\n      } else {\n        const error = await response.json();\n        toast({\n          title: \"Error\",\n          description: error.error || \"Failed to create token\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create API token\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setCreating(false);\n    }\n  };\n\n  const handleDeleteToken = async (tokenId: string) => {\n    setDeleting(tokenId);\n    try {\n      const token = localStorage.getItem('auth_token');\n      const response = await fetch(`/api/tokens/${tokenId}`, {\n        method: 'DELETE',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        toast({\n          title: \"Success\",\n          description: \"API token deleted successfully\"\n        });\n        await fetchTokens();\n      } else {\n        toast({\n          title: \"Error\",\n          description: \"Failed to delete token\",\n          variant: \"destructive\"\n        });\n      }\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete API token\",\n        variant: \"destructive\"\n      });\n    } finally {\n      setDeleting(null);\n    }\n  };\n\n  const copyToken = () => {\n    navigator.clipboard.writeText(newToken);\n    toast({\n      title: \"Copied!\",\n      description: \"Token copied to clipboard\"\n    });\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex items-center gap-3 mb-8\">\n          <SettingsIcon className=\"h-8 w-8 text-primary\" />\n          <h1 className=\"text-3xl font-bold\">Settings</h1>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex justify-between items-center\">\n              <div>\n                <CardTitle>API Tokens</CardTitle>\n                <CardDescription>\n                  Manage your API tokens for programmatic access to the API\n                </CardDescription>\n              </div>\n              <Button \n                onClick={() => setShowCreateDialog(true)}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-create-token\"\n              >\n                <Plus className=\"h-4 w-4\" />\n                Generate New Token\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {loading ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                Loading tokens...\n              </div>\n            ) : tokens.length === 0 ? (\n              <div className=\"text-center py-8\">\n                <Key className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n                <p className=\"text-muted-foreground\">No API tokens yet</p>\n                <p className=\"text-sm text-muted-foreground mt-2\">\n                  Create your first API token to start using the API\n                </p>\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Last Used</TableHead>\n                    <TableHead>Expires</TableHead>\n                    <TableHead className=\"text-right\">Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {tokens.map((token) => (\n                    <TableRow key={token.id}>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          <Key className=\"h-4 w-4 text-muted-foreground\" />\n                          {token.name}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                          <Calendar className=\"h-3 w-3\" />\n                          {format(new Date(token.createdAt), 'MMM dd, yyyy')}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {token.lastUsedAt ? (\n                          <div className=\"flex items-center gap-1 text-sm text-muted-foreground\">\n                            <Clock className=\"h-3 w-3\" />\n                            {format(new Date(token.lastUsedAt), 'MMM dd, yyyy')}\n                          </div>\n                        ) : (\n                          <Badge variant=\"secondary\">Never</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        {token.expiresAt ? (\n                          <Badge variant={new Date(token.expiresAt) < new Date() ? \"destructive\" : \"default\"}>\n                            {format(new Date(token.expiresAt), 'MMM dd, yyyy')}\n                          </Badge>\n                        ) : (\n                          <Badge variant=\"outline\">No expiry</Badge>\n                        )}\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <Button\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => handleDeleteToken(token.id)}\n                          disabled={deleting === token.id}\n                          data-testid={`button-delete-token-${token.id}`}\n                        >\n                          <Trash2 className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Create Token Dialog */}\n        <Dialog open={showCreateDialog} onOpenChange={setShowCreateDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Generate New API Token</DialogTitle>\n              <DialogDescription>\n                Enter a name for your new API token. This will help you identify it later.\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <Input\n                placeholder=\"Token name (e.g., Production API)\"\n                value={newTokenName}\n                onChange={(e) => setNewTokenName(e.target.value)}\n                onKeyDown={(e) => e.key === 'Enter' && handleCreateToken()}\n                data-testid=\"input-token-name\"\n              />\n            </div>\n            <DialogFooter>\n              <Button variant=\"outline\" onClick={() => setShowCreateDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleCreateToken} disabled={creating}>\n                {creating ? \"Creating...\" : \"Create Token\"}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Show Token Dialog */}\n        <Dialog open={showTokenDialog} onOpenChange={setShowTokenDialog}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Your New API Token</DialogTitle>\n              <DialogDescription>\n                Save this token securely. You won't be able to see it again!\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"py-4\">\n              <div className=\"bg-muted p-4 rounded-lg font-mono text-sm break-all\">\n                {newToken}\n              </div>\n              <Button\n                onClick={copyToken}\n                className=\"w-full mt-4\"\n                variant=\"outline\"\n                data-testid=\"button-copy-token\"\n              >\n                <Copy className=\"h-4 w-4 mr-2\" />\n                Copy Token\n              </Button>\n            </div>\n            <DialogFooter>\n              <Button onClick={() => {\n                setShowTokenDialog(false);\n                setNewToken(\"\");\n              }}>\n                Done\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":12238},"openapi.yaml":{"content":"openapi: 3.0.3\ninfo:\n  title: AI ShopHub E-Commerce API\n  description: |\n    Comprehensive REST API for AI ShopHub e-commerce platform featuring:\n    - AI-powered semantic product search\n    - User authentication and session management\n    - Shopping cart and wishlist functionality\n    - Order processing and management\n    - Product catalog with advanced filtering\n    \n    The API uses Bearer token authentication for all endpoints.\n    Users can generate API tokens from the Settings page and use them to authenticate API requests.\n  version: 1.0.0\n  contact:\n    name: AI ShopHub Support\n    email: support@aishophub.com\n  license:\n    name: MIT\n    url: https://opensource.org/licenses/MIT\n\nservers:\n  - url: https://aishophub.replit.app\n    description: Production server\n  - url: https://0c266820-54a5-4fae-91bf-588b13fb49c7-00-2xj80jb8edwel.worf.replit.dev\n    description: Development server (Replit)\n  - url: http://localhost:5000\n    description: Local development server\n\ntags:\n  - name: Authentication\n    description: User authentication and session management endpoints\n  - name: API Tokens\n    description: API token generation and management for programmatic access\n  - name: Products\n    description: Product catalog, search, and AI-powered semantic search\n  - name: Cart\n    description: Shopping cart management operations\n  - name: Wishlist\n    description: User wishlist management\n  - name: Orders\n    description: Order processing and management\n\npaths:\n  /api/auth/signup:\n    post:\n      tags:\n        - Authentication\n      summary: Register new user\n      description: Create a new user account with email, password, and name\n      operationId: signUp\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - password\n                - name\n              properties:\n                email:\n                  type: string\n                  format: email\n                  description: User's email address (must be unique)\n                  example: user@example.com\n                password:\n                  type: string\n                  format: password\n                  minLength: 6\n                  description: User's password (minimum 6 characters)\n                  example: SecurePass123!\n                name:\n                  type: string\n                  description: User's full name\n                  example: John Doe\n      responses:\n        '200':\n          description: User successfully created and logged in\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n                  token:\n                    type: string\n                    description: Session token for authentication\n                    example: abc123def456...\n        '400':\n          description: Invalid input or user already exists\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /api/auth/signin:\n    post:\n      tags:\n        - Authentication\n      summary: User login\n      description: Authenticate user with email and password to receive session token\n      operationId: signIn\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - email\n                - password\n              properties:\n                email:\n                  type: string\n                  format: email\n                  description: User's registered email address\n                  example: user@example.com\n                password:\n                  type: string\n                  format: password\n                  description: User's password\n                  example: SecurePass123!\n      responses:\n        '200':\n          description: Successfully authenticated\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n                  token:\n                    type: string\n                    description: Session token for authentication\n                    example: abc123def456...\n        '401':\n          description: Invalid credentials\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /api/auth/logout:\n    post:\n      tags:\n        - Authentication\n      summary: User logout\n      description: Invalidate current session token and log out user\n      operationId: logout\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Successfully logged out\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/auth/me:\n    get:\n      tags:\n        - Authentication\n      summary: Get current user\n      description: Retrieve current authenticated user's information\n      operationId: getCurrentUser\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Current user information\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  user:\n                    $ref: '#/components/schemas/User'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/tokens:\n    post:\n      tags:\n        - API Tokens\n      summary: Create API token\n      description: Generate a new API token for programmatic access\n      operationId: createApiToken\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - name\n              properties:\n                name:\n                  type: string\n                  description: Name to identify the token\n                  example: \"Production API Token\"\n      responses:\n        '200':\n          description: Token created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  token:\n                    type: string\n                    description: The API token (shown only once)\n                    example: \"ak_1234567890abcdef...\"\n                  apiToken:\n                    $ref: '#/components/schemas/ApiToken'\n                  message:\n                    type: string\n                    example: \"Save this token securely. You won't be able to see it again!\"\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    \n    get:\n      tags:\n        - API Tokens\n      summary: List API tokens\n      description: Get all API tokens for the authenticated user\n      operationId: listApiTokens\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: List of API tokens\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/ApiToken'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/tokens/{tokenId}:\n    delete:\n      tags:\n        - API Tokens\n      summary: Delete API token\n      description: Revoke and delete an API token\n      operationId: deleteApiToken\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: tokenId\n          in: path\n          required: true\n          description: ID of the token to delete\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Token deleted successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/products:\n    get:\n      tags:\n        - Products\n      summary: List products\n      description: Retrieve paginated list of products with optional filters and sorting\n      operationId: getProducts\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: page\n          in: query\n          description: Page number for pagination\n          schema:\n            type: integer\n            default: 1\n            minimum: 1\n        - name: limit\n          in: query\n          description: Number of products per page\n          schema:\n            type: integer\n            default: 20\n            minimum: 1\n            maximum: 100\n        - name: search\n          in: query\n          description: Search term to filter products by name or description\n          schema:\n            type: string\n        - name: category\n          in: query\n          description: Filter products by category\n          schema:\n            type: string\n        - name: sortBy\n          in: query\n          description: Sort products by specified criteria\n          schema:\n            type: string\n            enum:\n              - price_asc\n              - price_desc\n              - rating\n              - newest\n        - name: priceMin\n          in: query\n          description: Minimum price filter\n          schema:\n            type: number\n            minimum: 0\n        - name: priceMax\n          in: query\n          description: Maximum price filter\n          schema:\n            type: number\n            minimum: 0\n        - name: rating\n          in: query\n          description: Minimum rating filter (1-5)\n          schema:\n            type: number\n            minimum: 1\n            maximum: 5\n      responses:\n        '200':\n          description: List of products with pagination info\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  products:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Product'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '500':\n          description: Server error\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /api/semantic-search:\n    post:\n      tags:\n        - Products\n      summary: AI-powered semantic search\n      description: |\n        Search products using natural language queries powered by AI. \n        This endpoint understands context and intent, allowing searches like:\n        - \"comfortable running shoes for marathons\"\n        - \"black shirt with white pants\"\n        - \"gaming laptop under 50000\"\n        - \"gift for 10 year old boy who likes science\"\n      operationId: semanticSearch\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - query\n              properties:\n                query:\n                  type: string\n                  description: Natural language search query\n                  example: \"black shirt with white pant\"\n                n_results:\n                  type: integer\n                  description: Number of results to return\n                  default: 20\n                  minimum: 1\n                  maximum: 100\n      responses:\n        '200':\n          description: Semantically relevant products\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  products:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: Product ID\n                        text:\n                          type: string\n                          description: Product description used for matching\n                        metadata:\n                          type: object\n                          description: Additional product metadata\n                        relevance_score:\n                          type: number\n                          description: Semantic relevance score (0-1)\n        '400':\n          description: Invalid query\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /api/products/by-ids:\n    get:\n      tags:\n        - Products\n      summary: Get products by IDs\n      description: Retrieve multiple products by their IDs with optional filters and sorting\n      operationId: getProductsByIds\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: ids\n          in: query\n          required: true\n          description: Comma-separated list of product IDs\n          schema:\n            type: string\n            example: \"B0CDGM3SZM,B07F755J59,B094N6Q59T\"\n        - name: category\n          in: query\n          description: Filter results by category\n          schema:\n            type: string\n        - name: sortBy\n          in: query\n          description: Sort products by specified criteria\n          schema:\n            type: string\n            enum:\n              - price_asc\n              - price_desc\n              - rating\n        - name: priceMin\n          in: query\n          description: Minimum price filter\n          schema:\n            type: number\n        - name: priceMax\n          in: query\n          description: Maximum price filter\n          schema:\n            type: number\n        - name: rating\n          in: query\n          description: Minimum rating filter\n          schema:\n            type: number\n      responses:\n        '200':\n          description: List of requested products\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  products:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/Product'\n        '400':\n          description: Invalid product IDs\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /api/products/{id}:\n    get:\n      tags:\n        - Products\n      summary: Get product details\n      description: Retrieve detailed information about a specific product\n      operationId: getProductById\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: id\n          in: path\n          required: true\n          description: Product ID\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Product details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Product'\n        '404':\n          description: Product not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n\n  /api/categories:\n    get:\n      tags:\n        - Products\n      summary: List categories\n      description: Retrieve all available product categories\n      operationId: getCategories\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: List of categories\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  type: string\n                example:\n                  - \"Electronics\"\n                  - \"Clothing\"\n                  - \"Home & Kitchen\"\n                  - \"Sports & Outdoors\"\n\n  /api/cart:\n    get:\n      tags:\n        - Cart\n      summary: Get cart items\n      description: Retrieve all items in the authenticated user's shopping cart\n      operationId: getCart\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Cart items\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/CartItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    \n    post:\n      tags:\n        - Cart\n      summary: Add to cart\n      description: Add a product to the shopping cart\n      operationId: addToCart\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - productId\n                - quantity\n              properties:\n                productId:\n                  type: string\n                  description: Product ID to add\n                quantity:\n                  type: integer\n                  minimum: 1\n                  description: Quantity to add\n      responses:\n        '200':\n          description: Cart item added\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CartItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    \n    delete:\n      tags:\n        - Cart\n      summary: Clear cart\n      description: Remove all items from the shopping cart\n      operationId: clearCart\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Cart cleared\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/cart/{productId}:\n    put:\n      tags:\n        - Cart\n      summary: Update cart item\n      description: Update the quantity of a product in the cart\n      operationId: updateCartItem\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          description: Product ID\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - quantity\n              properties:\n                quantity:\n                  type: integer\n                  minimum: 0\n                  description: New quantity (0 to remove)\n      responses:\n        '200':\n          description: Cart item updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/CartItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    \n    delete:\n      tags:\n        - Cart\n      summary: Remove from cart\n      description: Remove a specific product from the cart\n      operationId: removeFromCart\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          description: Product ID\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Item removed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/wishlist:\n    get:\n      tags:\n        - Wishlist\n      summary: Get wishlist\n      description: Retrieve all items in the user's wishlist\n      operationId: getWishlist\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Wishlist items\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/WishlistItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n    \n    post:\n      tags:\n        - Wishlist\n      summary: Add to wishlist\n      description: Add a product to the wishlist\n      operationId: addToWishlist\n      security:\n        - bearerAuth: []\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - productId\n              properties:\n                productId:\n                  type: string\n                  description: Product ID to add\n      responses:\n        '200':\n          description: Item added to wishlist\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/WishlistItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/wishlist/{productId}:\n    delete:\n      tags:\n        - Wishlist\n      summary: Remove from wishlist\n      description: Remove a product from the wishlist\n      operationId: removeFromWishlist\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          description: Product ID\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Item removed\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/wishlist/check/{productId}:\n    get:\n      tags:\n        - Wishlist\n      summary: Check wishlist status\n      description: Check if a product is in the user's wishlist\n      operationId: checkWishlistStatus\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          description: Product ID\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Wishlist status\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  isInWishlist:\n                    type: boolean\n                    description: Whether product is in wishlist\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/checkout:\n    post:\n      tags:\n        - Orders\n      summary: Checkout cart\n      description: Create an order from current cart items and clear the cart\n      operationId: checkout\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Order created successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  order:\n                    $ref: '#/components/schemas/Order'\n                  message:\n                    type: string\n                    example: \"Order placed successfully\"\n        '400':\n          description: Cart is empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/orders:\n    get:\n      tags:\n        - Orders\n      summary: Get user orders\n      description: Retrieve all orders for the authenticated user\n      operationId: getOrders\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: List of orders\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/Order'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/orders/{orderId}:\n    get:\n      tags:\n        - Orders\n      summary: Get order details\n      description: Retrieve details of a specific order\n      operationId: getOrderById\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: orderId\n          in: path\n          required: true\n          description: Order ID\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Order details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Order'\n        '404':\n          description: Order not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '403':\n          description: Unauthorized to view order\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /api/orders/{orderId}/invoice:\n    post:\n      tags:\n        - Orders\n      summary: Update order invoice URL\n      description: Update the invoice URL for a specific order\n      operationId: updateOrderInvoice\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: orderId\n          in: path\n          required: true\n          description: Order ID\n          schema:\n            type: string\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              type: object\n              required:\n                - invoiceUrl\n              properties:\n                invoiceUrl:\n                  type: string\n                  description: URL of the invoice\n                  example: \"https://example.com/invoice/12345.pdf\"\n      responses:\n        '200':\n          description: Invoice URL updated successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n        '400':\n          description: Invalid request\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /cart/add/{productId}:\n    post:\n      tags:\n        - Cart\n      summary: Add product to cart (Alternative)\n      description: Alternative endpoint to add a product to cart with path parameter\n      operationId: addToCartAlternative\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          description: Product ID to add to cart\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              type: object\n              properties:\n                quantity:\n                  type: integer\n                  minimum: 1\n                  default: 1\n                  description: Quantity to add (default is 1)\n      responses:\n        '200':\n          description: Product added to cart successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: \"Product added to cart\"\n                  cartItem:\n                    type: object\n                    properties:\n                      productId:\n                        type: string\n                      quantity:\n                        type: integer\n                      product:\n                        $ref: '#/components/schemas/Product'\n        '404':\n          description: Product not found\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /cart/remove/{productId}:\n    delete:\n      tags:\n        - Cart\n      summary: Remove product from cart (Alternative)\n      description: Alternative endpoint to remove a product from cart\n      operationId: removeFromCartAlternative\n      security:\n        - bearerAuth: []\n      parameters:\n        - name: productId\n          in: path\n          required: true\n          description: Product ID to remove from cart\n          schema:\n            type: string\n      responses:\n        '200':\n          description: Product removed from cart successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: \"Product removed from cart\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /wishlist/listProducts:\n    get:\n      tags:\n        - Wishlist\n      summary: List wishlist products (Alternative)\n      description: Alternative endpoint to get all products in user's wishlist with formatted response\n      operationId: listWishlistProducts\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Wishlist products retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  products:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        id:\n                          type: string\n                          description: Product ID\n                        name:\n                          type: string\n                          description: Product name\n                        price:\n                          type: string\n                          description: Discounted price\n                        originalPrice:\n                          type: string\n                          description: Original price before discount\n                        category:\n                          type: string\n                          description: Product category\n                        addedAt:\n                          type: string\n                          format: date-time\n                          description: When the product was added to wishlist\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /orders/myorders:\n    get:\n      tags:\n        - Orders\n      summary: Get my orders (Alternative)\n      description: Alternative endpoint to get all orders for authenticated user with formatted response\n      operationId: getMyOrders\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: User's orders retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  orders:\n                    type: array\n                    items:\n                      type: object\n                      properties:\n                        orderId:\n                          type: string\n                          description: Order ID\n                        totalAmount:\n                          type: string\n                          description: Total order amount\n                        status:\n                          type: string\n                          description: Order status\n                        createdAt:\n                          type: string\n                          format: date-time\n                          description: Order creation date\n                        items:\n                          type: array\n                          items:\n                            $ref: '#/components/schemas/OrderItem'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /filters/listCategories:\n    get:\n      tags:\n        - Products\n      summary: List categories (Alternative)\n      description: Alternative endpoint to get all available product categories with formatted response\n      operationId: listCategories\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Categories retrieved successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  categories:\n                    type: array\n                    items:\n                      type: string\n                    example:\n                      - \"Electronics\"\n                      - \"Clothing\"\n                      - \"Home & Kitchen\"\n                      - \"Sports & Outdoors\"\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\n  /orders/completeOrder:\n    post:\n      tags:\n        - Orders\n      summary: Complete order (Alternative)\n      description: Alternative endpoint to checkout and create order from cart items\n      operationId: completeOrder\n      security:\n        - bearerAuth: []\n      responses:\n        '200':\n          description: Order completed successfully\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  success:\n                    type: boolean\n                    example: true\n                  message:\n                    type: string\n                    example: \"Order completed successfully\"\n                  order:\n                    type: object\n                    properties:\n                      orderId:\n                        type: string\n                      totalAmount:\n                        type: string\n                      status:\n                        type: string\n                      createdAt:\n                        type: string\n                        format: date-time\n                      items:\n                        type: array\n                        items:\n                          $ref: '#/components/schemas/OrderItem'\n        '400':\n          description: Cart is empty\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/Error'\n        '401':\n          $ref: '#/components/responses/UnauthorizedError'\n\ncomponents:\n  securitySchemes:\n    bearerAuth:\n      type: http\n      scheme: bearer\n      description: |\n        Bearer token authentication. Use either:\n        - Session token obtained from /api/auth/signin or /api/auth/signup\n        - API token generated from the Settings page (starts with 'ak_')\n        Example: Authorization: Bearer <token>\n\n  schemas:\n    User:\n      type: object\n      properties:\n        id:\n          type: string\n          description: User ID\n        email:\n          type: string\n          format: email\n          description: User email address\n        name:\n          type: string\n          description: User's full name\n\n    ApiToken:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Token ID\n        name:\n          type: string\n          description: Token name/identifier\n        createdAt:\n          type: string\n          format: date-time\n          description: When the token was created\n        expiresAt:\n          type: string\n          format: date-time\n          nullable: true\n          description: When the token expires (null if no expiry)\n        lastUsedAt:\n          type: string\n          format: date-time\n          nullable: true\n          description: When the token was last used\n\n    Product:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Product ID\n        productName:\n          type: string\n          description: Product name\n        productDescription:\n          type: string\n          description: Product description\n        category:\n          type: string\n          description: Product category\n        actualPrice:\n          type: string\n          description: Original price before discount\n        discountedPrice:\n          type: string\n          description: Current selling price\n        discountPercentage:\n          type: string\n          description: Discount percentage\n        rating:\n          type: string\n          description: Product rating (1-5)\n        ratingCount:\n          type: string\n          description: Number of ratings\n        brand:\n          type: string\n          description: Product brand\n        aboutProduct:\n          type: string\n          description: Detailed product information\n        imgUrl:\n          type: string\n          description: Product image URL\n        productUrl:\n          type: string\n          description: Product page URL\n\n    CartItem:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Cart item ID\n        userId:\n          type: string\n          description: User ID\n        productId:\n          type: string\n          description: Product ID\n        quantity:\n          type: integer\n          description: Quantity in cart\n        product:\n          $ref: '#/components/schemas/Product'\n        createdAt:\n          type: string\n          format: date-time\n        updatedAt:\n          type: string\n          format: date-time\n\n    WishlistItem:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Wishlist item ID\n        userId:\n          type: string\n          description: User ID\n        productId:\n          type: string\n          description: Product ID\n        product:\n          $ref: '#/components/schemas/Product'\n        createdAt:\n          type: string\n          format: date-time\n\n    Order:\n      type: object\n      properties:\n        id:\n          type: string\n          description: Order ID\n        userId:\n          type: string\n          description: User ID\n        totalAmount:\n          type: string\n          description: Total order amount\n        status:\n          type: string\n          enum:\n            - pending\n            - processing\n            - completed\n            - cancelled\n          description: Order status\n        createdAt:\n          type: string\n          format: date-time\n        items:\n          type: array\n          items:\n            $ref: '#/components/schemas/OrderItem'\n\n    OrderItem:\n      type: object\n      properties:\n        productId:\n          type: string\n          description: Product ID\n        productName:\n          type: string\n          description: Product name\n        price:\n          type: string\n          description: Price per unit\n        quantity:\n          type: integer\n          description: Quantity ordered\n        totalPrice:\n          type: string\n          description: Total price for this item\n\n    Pagination:\n      type: object\n      properties:\n        page:\n          type: integer\n          description: Current page number\n        limit:\n          type: integer\n          description: Items per page\n        total:\n          type: integer\n          description: Total number of items\n        totalPages:\n          type: integer\n          description: Total number of pages\n\n    Error:\n      type: object\n      properties:\n        error:\n          type: string\n          description: Error message\n        success:\n          type: boolean\n          description: Operation status\n          example: false\n\n  responses:\n    UnauthorizedError:\n      description: Authentication information is missing or invalid\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/Error'","size_bytes":40808},"server/swagger-docs.ts":{"content":"/**\n * @swagger\n * /api/auth/signup:\n *   post:\n *     summary: Register a new user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *               - password\n *               - confirmPassword\n *               - name\n *             properties:\n *               email:\n *                 type: string\n *                 format: email\n *                 example: user@example.com\n *               password:\n *                 type: string\n *                 format: password\n *                 example: password123\n *               confirmPassword:\n *                 type: string\n *                 format: password\n *                 example: password123\n *               name:\n *                 type: string\n *                 example: John Doe\n *     responses:\n *       200:\n *         description: User registered successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   $ref: '#/components/schemas/User'\n *                 token:\n *                   type: string\n *       400:\n *         description: User already exists or validation error\n */\n\n/**\n * @swagger\n * /api/auth/signin:\n *   post:\n *     summary: Sign in an existing user\n *     tags: [Authentication]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - email\n *               - password\n *             properties:\n *               email:\n *                 type: string\n *                 format: email\n *                 example: user@example.com\n *               password:\n *                 type: string\n *                 format: password\n *                 example: password123\n *     responses:\n *       200:\n *         description: Signed in successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   $ref: '#/components/schemas/User'\n *                 token:\n *                   type: string\n *       401:\n *         description: Invalid credentials\n */\n\n/**\n * @swagger\n * /api/auth/logout:\n *   post:\n *     summary: Logout current user\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Logged out successfully\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/auth/me:\n *   get:\n *     summary: Get current user information\n *     tags: [Authentication]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: User information retrieved\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 user:\n *                   $ref: '#/components/schemas/User'\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/products:\n *   get:\n *     summary: Get all products with pagination and filters\n *     tags: [Products]\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           default: 1\n *         description: Page number\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           default: 20\n *         description: Items per page\n *       - in: query\n *         name: search\n *         schema:\n *           type: string\n *         description: Search term\n *       - in: query\n *         name: category\n *         schema:\n *           type: string\n *         description: Filter by category\n *       - in: query\n *         name: sortBy\n *         schema:\n *           type: string\n *           enum: [price_asc, price_desc, rating, name]\n *         description: Sort order\n *       - in: query\n *         name: priceMin\n *         schema:\n *           type: string\n *         description: Minimum price filter\n *       - in: query\n *         name: priceMax\n *         schema:\n *           type: string\n *         description: Maximum price filter\n *       - in: query\n *         name: rating\n *         schema:\n *           type: string\n *         description: Minimum rating filter\n *     responses:\n *       200:\n *         description: Products retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 products:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Product'\n *                 pagination:\n *                   type: object\n *                   properties:\n *                     page:\n *                       type: integer\n *                     limit:\n *                       type: integer\n *                     total:\n *                       type: integer\n *                     totalPages:\n *                       type: integer\n */\n\n/**\n * @swagger\n * /api/products/{id}:\n *   get:\n *     summary: Get a specific product by ID\n *     tags: [Products]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: string\n *         description: Product ID\n *     responses:\n *       200:\n *         description: Product retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Product'\n *       404:\n *         description: Product not found\n */\n\n/**\n * @swagger\n * /api/semantic-search:\n *   post:\n *     summary: AI-powered semantic product search\n *     tags: [Products]\n *     description: Uses AI to understand natural language queries and find relevant products\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - query\n *             properties:\n *               query:\n *                 type: string\n *                 description: Natural language search query\n *                 example: \"black shirt with white pant\"\n *               n_results:\n *                 type: integer\n *                 default: 20\n *                 description: Number of results to return\n *                 example: 20\n *     responses:\n *       200:\n *         description: Semantic search results\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 products:\n *                   type: array\n *                   items:\n *                     type: object\n *                     properties:\n *                       id:\n *                         type: string\n *                         description: Product ID\n *                       text:\n *                         type: string\n *                         description: Product description text\n *                       metadata:\n *                         type: object\n *                         properties:\n *                           rating:\n *                             type: number\n *                           discounted_price:\n *                             type: number\n *                           rating_count:\n *                             type: number\n *                           discount_percentage:\n *                             type: number\n *                           img_link:\n *                             type: string\n *                           product_link:\n *                             type: string\n *                           actual_price:\n *                             type: number\n *                       distance:\n *                         type: number\n *                         description: Semantic distance/relevance score\n *       400:\n *         description: Query is required\n *       500:\n *         description: Failed to perform semantic search\n */\n\n/**\n * @swagger\n * /api/products/by-ids:\n *   get:\n *     summary: Get multiple products by their IDs\n *     tags: [Products]\n *     parameters:\n *       - in: query\n *         name: ids\n *         required: true\n *         schema:\n *           type: string\n *         description: Comma-separated list of product IDs\n *         example: \"B0C6Q5NCMM,B0CB2CRT3R,B08PFSZ7FH\"\n *       - in: query\n *         name: category\n *         schema:\n *           type: string\n *         description: Filter by category\n *       - in: query\n *         name: sortBy\n *         schema:\n *           type: string\n *           enum: [price_asc, price_desc, rating]\n *         description: Sort order\n *       - in: query\n *         name: priceMin\n *         schema:\n *           type: string\n *         description: Minimum price filter\n *       - in: query\n *         name: priceMax\n *         schema:\n *           type: string\n *         description: Maximum price filter\n *       - in: query\n *         name: rating\n *         schema:\n *           type: string\n *         description: Minimum rating filter\n *     responses:\n *       200:\n *         description: Products retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 products:\n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Product'\n *       400:\n *         description: Product IDs are required\n */\n\n/**\n * @swagger\n * /api/categories:\n *   get:\n *     summary: Get all product categories\n *     tags: [Categories]\n *     responses:\n *       200:\n *         description: Categories retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 type: string\n */\n\n/**\n * @swagger\n * /api/cart:\n *   get:\n *     summary: Get current user's cart items\n *     tags: [Cart]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Cart items retrieved\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/CartItem'\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/cart:\n *   post:\n *     summary: Add item to cart\n *     tags: [Cart]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             required:\n *               - productId\n *               - quantity\n *             properties:\n *               productId:\n *                 type: string\n *               quantity:\n *                 type: integer\n *                 minimum: 1\n *     responses:\n *       200:\n *         description: Item added to cart\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/cart/{productId}:\n *   put:\n *     summary: Update cart item quantity\n *     tags: [Cart]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: productId\n *         required: true\n *         schema:\n *           type: string\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               quantity:\n *                 type: integer\n *                 minimum: 0\n *     responses:\n *       200:\n *         description: Cart item updated\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/cart/{productId}:\n *   delete:\n *     summary: Remove item from cart\n *     tags: [Cart]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: productId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Item removed from cart\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/cart:\n *   delete:\n *     summary: Clear entire cart\n *     tags: [Cart]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Cart cleared\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/wishlist:\n *   get:\n *     summary: Get user's wishlist items\n *     tags: [Wishlist]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Wishlist items retrieved\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/wishlist:\n *   post:\n *     summary: Add item to wishlist\n *     tags: [Wishlist]\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               productId:\n *                 type: string\n *     responses:\n *       200:\n *         description: Item added to wishlist\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/wishlist/{productId}:\n *   delete:\n *     summary: Remove item from wishlist\n *     tags: [Wishlist]\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: productId\n *         required: true\n *         schema:\n *           type: string\n *     responses:\n *       200:\n *         description: Item removed from wishlist\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/checkout:\n *   post:\n *     summary: Checkout and create order from cart\n *     tags: [Orders]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Order created successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 order:\n *                   $ref: '#/components/schemas/Order'\n *                 message:\n *                   type: string\n *       400:\n *         description: Cart is empty\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /api/orders:\n *   get:\n *     summary: Get user's orders\n *     tags: [Orders]\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Orders retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Order'\n *       401:\n *         description: Not authenticated\n */\n\n/**\n * @swagger\n * /filters/listCategories:\n *   get:\n *     summary: List all available categories (Basic Auth)\n *     tags: [Categories]\n *     security:\n *       - basicAuth: []\n *     responses:\n *       200:\n *         description: Categories retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 categories:\n *                   type: array\n *                   items:\n *                     type: string\n *       401:\n *         description: Invalid credentials\n */\n\n/**\n * @swagger\n * /wishlist/listProducts:\n *   get:\n *     summary: List all products in wishlist (Basic Auth)\n *     tags: [Wishlist]\n *     security:\n *       - basicAuth: []\n *     responses:\n *       200:\n *         description: Wishlist products retrieved\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 products:\n *                   type: array\n *                   items:\n *                     type: object\n *                     properties:\n *                       id:\n *                         type: string\n *                       name:\n *                         type: string\n *                       price:\n *                         type: string\n *                       originalPrice:\n *                         type: string\n *                       category:\n *                         type: string\n *                       addedAt:\n *                         type: string\n *                         format: date-time\n *       401:\n *         description: Invalid credentials\n */\n\n/**\n * @swagger\n * /cart/add/{productId}:\n *   post:\n *     summary: Add product to cart (Basic Auth)\n *     tags: [Cart]\n *     security:\n *       - basicAuth: []\n *     parameters:\n *       - in: path\n *         name: productId\n *         required: true\n *         schema:\n *           type: string\n *         description: Product ID to add\n *     requestBody:\n *       content:\n *         application/json:\n *           schema:\n *             type: object\n *             properties:\n *               quantity:\n *                 type: integer\n *                 default: 1\n *                 minimum: 1\n *     responses:\n *       200:\n *         description: Product added to cart\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 message:\n *                   type: string\n *                 cartItem:\n *                   type: object\n *       404:\n *         description: Product not found\n *       401:\n *         description: Invalid credentials\n */\n\n/**\n * @swagger\n * /cart/remove/{productId}:\n *   delete:\n *     summary: Remove product from cart (Basic Auth)\n *     tags: [Cart]\n *     security:\n *       - basicAuth: []\n *     parameters:\n *       - in: path\n *         name: productId\n *         required: true\n *         schema:\n *           type: string\n *         description: Product ID to remove\n *     responses:\n *       200:\n *         description: Product removed from cart\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 message:\n *                   type: string\n *       401:\n *         description: Invalid credentials\n */\n\n/**\n * @swagger\n * /orders/myorders:\n *   get:\n *     summary: List user's orders (Basic Auth)\n *     tags: [Orders]\n *     security:\n *       - basicAuth: []\n *     responses:\n *       200:\n *         description: Orders retrieved successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 orders:\n *                   type: array\n *                   items:\n *                     type: object\n *                     properties:\n *                       orderId:\n *                         type: string\n *                       totalAmount:\n *                         type: string\n *                       status:\n *                         type: string\n *                       createdAt:\n *                         type: string\n *                         format: date-time\n *                       items:\n *                         type: array\n *                         items:\n *                           type: object\n *       401:\n *         description: Invalid credentials\n */\n\n/**\n * @swagger\n * /orders/completeOrder:\n *   post:\n *     summary: Complete order from cart items (Basic Auth)\n *     tags: [Orders]\n *     security:\n *       - basicAuth: []\n *     responses:\n *       200:\n *         description: Order completed successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 success:\n *                   type: boolean\n *                 message:\n *                   type: string\n *                 order:\n *                   type: object\n *                   properties:\n *                     orderId:\n *                       type: string\n *                     totalAmount:\n *                       type: string\n *                     status:\n *                       type: string\n *                     createdAt:\n *                       type: string\n *                     items:\n *                       type: array\n *       400:\n *         description: Cart is empty\n *       401:\n *         description: Invalid credentials\n */","size_bytes":21017},"server/swagger.ts":{"content":"import swaggerJsdoc from 'swagger-jsdoc';\n\nconst options = {\n  definition: {\n    openapi: '3.0.0',\n    info: {\n      title: 'E-Commerce API Documentation',\n      version: '1.0.0',\n      description: 'Complete API documentation for the e-commerce platform with authentication and shopping features',\n      contact: {\n        name: 'API Support',\n        email: 'support@example.com'\n      }\n    },\n    servers: [\n      {\n        url: 'https://aishophub.replit.app',\n        description: 'AI Shop Hub Production Server'\n      },\n      {\n        url: 'https://0c266820-54a5-4fae-91bf-588b13fb49c7-00-2xj80jb8edwel.worf.replit.dev',\n        description: 'Development Server (Replit)'\n      },\n      {\n        url: 'http://localhost:5000',\n        description: 'Local Development Server'\n      }\n    ],\n    components: {\n      securitySchemes: {\n        bearerAuth: {\n          type: 'http',\n          scheme: 'bearer',\n          bearerFormat: 'JWT',\n          description: 'Enter the API token generated from Settings page (starts with ak_)'\n        }\n      },\n      schemas: {\n        User: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            email: { type: 'string', format: 'email' },\n            name: { type: 'string' }\n          }\n        },\n        Product: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            productName: { type: 'string' },\n            category: { type: 'string' },\n            discountedPrice: { type: 'string' },\n            actualPrice: { type: 'string' },\n            discountPercentage: { type: 'string' },\n            rating: { type: 'string' },\n            ratingCount: { type: 'string' },\n            aboutProduct: { type: 'string' },\n            imgLink: { type: 'string' },\n            productLink: { type: 'string' }\n          }\n        },\n        CartItem: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            userId: { type: 'string' },\n            productId: { type: 'string' },\n            quantity: { type: 'number' },\n            product: { $ref: '#/components/schemas/Product' }\n          }\n        },\n        Order: {\n          type: 'object',\n          properties: {\n            id: { type: 'string' },\n            userId: { type: 'string' },\n            totalAmount: { type: 'string' },\n            status: { type: 'string', enum: ['pending', 'processing', 'completed', 'cancelled'] },\n            createdAt: { type: 'string', format: 'date-time' },\n            items: {\n              type: 'array',\n              items: {\n                type: 'object',\n                properties: {\n                  productId: { type: 'string' },\n                  productName: { type: 'string' },\n                  price: { type: 'string' },\n                  quantity: { type: 'number' },\n                  totalPrice: { type: 'string' }\n                }\n              }\n            }\n          }\n        },\n        Error: {\n          type: 'object',\n          properties: {\n            error: { type: 'string' },\n            message: { type: 'string' }\n          }\n        },\n        Success: {\n          type: 'object',\n          properties: {\n            success: { type: 'boolean' },\n            message: { type: 'string' }\n          }\n        }\n      }\n    },\n    tags: [\n      {\n        name: 'Authentication',\n        description: 'User authentication endpoints'\n      },\n      {\n        name: 'Products',\n        description: 'Product catalog operations'\n      },\n      {\n        name: 'Cart',\n        description: 'Shopping cart management'\n      },\n      {\n        name: 'Wishlist',\n        description: 'Wishlist management'\n      },\n      {\n        name: 'Orders',\n        description: 'Order management'\n      },\n      {\n        name: 'Categories',\n        description: 'Product categories'\n      }\n    ]\n  },\n  apis: ['./server/routes.ts', './server/swagger-docs.ts']\n};\n\nexport const swaggerSpec = swaggerJsdoc(options);","size_bytes":4011}},"version":1}